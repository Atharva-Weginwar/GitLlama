{"repository": "AI-based-System-Design-Builder", "branches": [
{
    "branch": "main",
    "commits": [
        {
            "commit_hash": "af9f8c58baac3fbf6bbfd0e0b14040bb2ffcb380",
            "message": "Blogpost Folder",
            "author": {
                "name": "Atharva-Weginwar",
                "email": "weginwaratharva99@gmail.com"
            },
            "timestamp": "2024-10-02T22:55:08+00:00",
            "previous_commit": "a1b222655e3fb44bb58c580077c8d35845adb063",
            "files_changed": [
                {
                    "filename": "Blogpost/AI System Design Builder Interface.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/Ashutosh.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/Atharva.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/Flask.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/HTMl and CSS.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/Javascript.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/NVIDIA AI Workbench Setup.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/NVIDIA_AI_Workbench.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/Ollama.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/Python-Symbol.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/banner-image.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/docker.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/index.html",
                    "status": "added",
                    "additions": 235,
                    "deletions": 0,
                    "changes": 235,
                    "patch": "@@ -0,0 +1,235 @@\n+<!DOCTYPE html>\n+<html lang=\"en\">\n+<head>\n+    <meta charset=\"UTF-8\">\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n+    <title>AI System Design Builder: Hackathon Project</title>\n+    <style>\n+        body {\n+            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n+            line-height: 1.6;\n+            color: #333;\n+            max-width: 800px;\n+            margin: 0 auto;\n+            padding: 20px;\n+            background-color: #f4f4f4;\n+        }\n+        .container {\n+            background-color: white;\n+            padding: 30px;\n+            border-radius: 8px;\n+            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n+        }\n+        h1 {\n+            color: #2c3e50;\n+            text-align: center;\n+            border-bottom: 2px solid #3498db;\n+            padding-bottom: 10px;\n+        }\n+        h2 {\n+            color: #34495e;\n+            margin-top: 30px;\n+        }\n+        img {\n+            max-width: 100%;\n+            height: auto;\n+            border-radius: 8px;\n+            margin: 20px 0;\n+            box-shadow: 0 0 10px rgba(0,0,0,0.1);\n+        }\n+        .team-member {\n+            background-color: #f9f9f9;\n+            border-left: 4px solid #3498db;\n+            padding: 10px;\n+            margin: 10px 0;\n+        }\n+        .step {\n+            background-color: #e8f4f8;\n+            padding: 15px;\n+            margin: 10px 0;\n+            border-radius: 5px;\n+        }\n+        code {\n+            background-color: #f0f0f0;\n+            padding: 2px 4px;\n+            border-radius: 4px;\n+        }\n+        .linkedin-profile {\n+            display: inline-block;\n+            margin-top: 5px;\n+            color: #0077b5;\n+            text-decoration: none;\n+        }\n+        .linkedin-profile:hover {\n+            text-decoration: underline;\n+        }\n+        .tech-stack {\n+            display: flex;\n+            flex-wrap: wrap;\n+            justify-content: start;\n+            gap: 30px;\n+            margin-top: 20px;\n+        }\n+        .tech-item {\n+            text-align: center;\n+            width: calc(33.33% - 20px);\n+            max-width: 150px;\n+        }\n+        .tech-item img {\n+            width: 100px;\n+            height: 100px;\n+            object-fit: contain;\n+            margin-bottom: 10px;\n+        }\n+    </style>\n+</head>\n+<body>\n+    <div class=\"container\">\n+        <h1>AI System Design Builder: Revolutionizing System Architecture Design</h1>\n+\n+        <img src=\"banner-image.jpeg\" alt=\"AI System Design Builder Banner\" class=\"banner-image\">\n+\n+        <h2>Inspiration</h2>\n+        <p>In the fast-paced world of software development, creating efficient and scalable system architectures is crucial. We recognized the need for a tool that could streamline this process, making it accessible to both seasoned architects and newcomers alike. The idea of leveraging AI to assist in system design sparked our imagination, leading to the birth of the AI System Design Builder.</p>\n+\n+        <h2>What it does</h2>\n+        <p>The AI System Design Builder is an interactive platform that empowers users to create and visualize system architectures with ease. Here's what it offers:</p>\n+        <ol>\n+            <li><strong>Component Selection</strong>: Users can manually choose from a curated list of essential system components.</li>\n+            <li><strong>Manual Design</strong>: Build connections between components, creating custom system designs.</li>\n+            <li><strong>AI-Powered Design Generation</strong>: Leverage GenAI to automatically generate system design graphs.</li>\n+            <li><strong>Voice Input</strong>: Describe system requirements verbally.</li>\n+            <li><strong>Visual Representation</strong>: Intuitive graph representation of system architectures.</li>\n+        </ol>\n+\n+        <img src=\"AI System Design Builder Interface.jpeg\" alt=\"AI System Design Builder Interface\">\n+\n+        <h2>How to Use</h2>\n+        <div class=\"step\">\n+            <h3>Step 1: Set Up NVIDIA AI Workbench</h3>\n+            <p>Follow the <a href=\"https://docs.nvidia.com/ai-workbench/user-guide/latest/installation/overview.html\">Installation guide</a> to set up the Workbench on your local machine or cloud environment.</p>\n+            <img src=\"NVIDIA AI Workbench Setup.jpeg\" alt=\"NVIDIA AI Workbench Setup\">\n+        </div>\n+\n+        <div class=\"step\">\n+            <h3>Step 2: Clone the Repository</h3>\n+            <code>\n+                git clone https://github.com/pvbgeek/AI-based-System-Design-Builder.git<br>\n+                cd AI-based-System-Design-Builder\n+            </code>\n+        </div>\n+\n+        <div class=\"step\">\n+            <h3>Step 3: Launch NVIDIA Workbench using WSL</h3>\n+            <code>wsl -d NVIDIA-Workbench --cd ~</code>\n+        </div>\n+\n+        <div class=\"step\">\n+            <h3>Step 4: Activate the NVIDIA Workbench Environment</h3>\n+            <code>nvwb activate local && nvwb open AI-Based-System-Design-Builder</code>\n+        </div>\n+\n+        <div class=\"step\">\n+            <h3>Step 5: Install Dependencies</h3>\n+            <code>pip install -r requirements.txt</code>\n+        </div>\n+\n+        <div class=\"step\">\n+            <h3>Step 6: Run the Application</h3>\n+            <code>python main.py</code>\n+            <p>Access the application at https://localhost:5000</p>\n+        </div>\n+\n+        <h2>How we built it</h2>\n+        <p>We developed the AI System Design Builder using a combination of cutting-edge technologies and platforms:</p>\n+        <div class=\"tech-stack\">\n+            <div class=\"tech-item\">\n+                <img src=\"NVIDIA_AI_Workbench.png\" alt=\"NVIDIA AI Workbench\">\n+                <p>NVIDIA AI Workbench</p>\n+            </div>\n+            <div class=\"tech-item\">\n+                <img src=\"Python-Symbol.png\" alt=\"Python\">\n+                <p>Python</p>\n+            </div>\n+            <div class=\"tech-item\">\n+                <img src=\"Flask.png\" alt=\"Flask\">\n+                <p>Flask</p>\n+            </div>\n+            <div class=\"tech-item\">\n+                <img src=\"HTMl and CSS.jpeg\" alt=\"HTML\">\n+                <p>HTML and CSS</p>\n+            </div>\n+            <div class=\"tech-item\">\n+                <img src=\"Javascript.jpeg\" alt=\"JavaScript\">\n+                <p>JavaScript</p>\n+            </div>\n+            <div class=\"tech-item\">\n+                <img src=\"Ollama.png\" alt=\"GenAI\">\n+                <p>GenAI</p>\n+            </div>\n+            <div class=\"tech-item\">\n+                <img src=\"docker.png\" alt=\"Docker\">\n+                <p>Docker</p>\n+            </div>\n+        </div>\n+\n+        <h2>Challenges we ran into</h2>\n+        <ol>\n+            <li><strong>Integrating AI Capabilities</strong>: Incorporating GenAI for accurate system design generation.</li>\n+            <li><strong>Balancing Flexibility and Constraints</strong>: Ensuring versatility while maintaining a predefined component set.</li>\n+            <li><strong>Optimizing Performance</strong>: Achieving quick and efficient AI-generated designs.</li>\n+        </ol>\n+\n+        <h2>Accomplishments that we're proud of</h2>\n+        <ol>\n+            <li><strong>Intuitive User Interface</strong>: Creating an accessible system design tool.</li>\n+            <li><strong>AI-Powered Design Generation</strong>: Successfully implementing AI for system architecture creation.</li>\n+            <li><strong>NVIDIA AI Workbench Integration</strong>: Leveraging advanced AI capabilities.</li>\n+        </ol>\n+\n+        <h2>What we learned</h2>\n+        <ol>\n+            <li><strong>AI in System Design</strong>: Applying AI to traditionally human-centric tasks.</li>\n+            <li><strong>Working with NVIDIA AI Workbench</strong>: Harnessing its power for AI-driven development.</li>\n+            <li><strong>Balancing User Input and AI Assistance</strong>: Creating a powerful hybrid approach.</li>\n+        </ol>\n+\n+        <h2>What's next for AI System Design Builder</h2>\n+        <ol>\n+            <li><strong>Expanded Component Library</strong></li>\n+            <li><strong>Enhanced AI Capabilities</strong></li>\n+            <li><strong>Collaboration Features</strong></li>\n+            <li><strong>Performance Analysis</strong></li>\n+            <li><strong>Integration with Development Tools</strong></li>\n+        </ol>\n+\n+        <h2>Meet the Team</h2>\n+        <div class=\"team-member\">\n+            <img src=\"parth.jpeg\" alt=\"Parth Bhalerao\" style=\"width: 150px; height: 150px; object-fit: cover; border-radius: 50%; float: left; margin-right: 15px;\">\n+            <h3>Parth Bhalerao</h3>\n+            <p>Worked on front-end and back-end JS development, creating a seamless user experience and robust application logic.</p>\n+            <a href=\"https://www.linkedin.com/in/parthvb/\" class=\"linkedin-profile\" target=\"_blank\">LinkedIn Profile</a>\n+        </div>\n+        <div class=\"team-member\">\n+            <img src=\"Atharva.jpeg\" alt=\"Atharva Weginwar\" style=\"width: 150px; height: 150px; object-fit: cover; border-radius: 50%; float: left; margin-right: 15px;\">\n+            <h3>Atharva Weginwar</h3>\n+            <p>Developed the GenAI feature, enabling AI-powered system design generation based on user requirements.</p>\n+            <a href=\"https://www.linkedin.com/in/atharvaweginwar/\" class=\"linkedin-profile\" target=\"_blank\">LinkedIn Profile</a>\n+        </div>\n+        <div class=\"team-member\">\n+            <img src=\"Ashutosh.jpeg\" alt=\"Ashutosh Talwalkar\" style=\"width: 150px; height: 150px; object-fit: cover; border-radius: 50%; float: left; margin-right: 15px;\">\n+            <h3>Ashutosh Talwalkar</h3>\n+            <p>Focused on front-end development, crafting an intuitive and visually appealing user interface.</p>\n+            <a href=\"https://www.linkedin.com/in/ashutosh-talwalkar-42ab72b7/\" class=\"linkedin-profile\" target=\"_blank\">LinkedIn Profile</a>\n+        </div>\n+        <div class=\"team-member\">\n+            <img src=\"yugandhar.jpeg\" alt=\"Yugandhar Desai\" style=\"width: 150px; height: 150px; object-fit: cover; border-radius: 50%; float: left; margin-right: 15px;\">\n+            <h3>Yugandhar Desai</h3>\n+            <p>Led the deployment of all features on NVIDIA AI Workbench, ensuring smooth integration and performance.</p>\n+            <a href=\"https://www.linkedin.com/in/yugandhar-desai/\" class=\"linkedin-profile\" target=\"_blank\">LinkedIn Profile</a>\n+        </div>\n+\n+        <p>The AI System Design Builder represents a significant step forward in how we approach system architecture. By combining the power of AI with human expertise, we're paving the way for more efficient, scalable, and innovative system designs.</p>\n+    </div>\n+</body>\n+</html>\n\\ No newline at end of file"
                },
                {
                    "filename": "Blogpost/parth.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "Blogpost/yugandhar.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                }
            ]
        },
        {
            "commit_hash": "a1b222655e3fb44bb58c580077c8d35845adb063",
            "message": "Update README.md",
            "author": {
                "name": "Atharva Weginwar",
                "email": "154084611+Atharva-Weginwar@users.noreply.github.com"
            },
            "timestamp": "2024-10-02T22:41:43+00:00",
            "previous_commit": "b8d3be7c616f2e19c4586539d936b9ea306106c5",
            "files_changed": [
                {
                    "filename": "README.md",
                    "status": "modified",
                    "additions": 4,
                    "deletions": 0,
                    "changes": 4,
                    "patch": "@@ -4,6 +4,10 @@ This project provides an interactive platform for building and simulating system\n \n Blogpost [Click here](https://atharva-weginwar.github.io/devpost.html)\n \n+YouTube [Click here](https://www.youtube.com/watch?v=taDNjlxNME4&t=1s)\n+\n+Devpost [Click here](https://devpost.com/software/ai-based-system-design-simulator)\n+\n ## Prerequisites\n \n Before running this project, make sure you have the following installed:"
                }
            ]
        },
        {
            "commit_hash": "b8d3be7c616f2e19c4586539d936b9ea306106c5",
            "message": "Update README.md",
            "author": {
                "name": "Atharva Weginwar",
                "email": "154084611+Atharva-Weginwar@users.noreply.github.com"
            },
            "timestamp": "2024-10-02T22:27:04+00:00",
            "previous_commit": "fa34d6522869d5bb175b5436139760b5a0e77cfe",
            "files_changed": [
                {
                    "filename": "README.md",
                    "status": "modified",
                    "additions": 2,
                    "deletions": 0,
                    "changes": 2,
                    "patch": "@@ -2,6 +2,8 @@\n \n This project provides an interactive platform for building and simulating system designs using AI. Powered by NVIDIA AI Workbench, it leverages advanced AI capabilities to generate optimized, scalable system architectures. \n \n+Blogpost [Click here](https://atharva-weginwar.github.io/devpost.html)\n+\n ## Prerequisites\n \n Before running this project, make sure you have the following installed:"
                }
            ]
        },
        {
            "commit_hash": "fa34d6522869d5bb175b5436139760b5a0e77cfe",
            "message": "Adding Hackathon logo",
            "author": {
                "name": "71ashu",
                "email": "71ashu@gmail.com"
            },
            "timestamp": "2024-09-30T00:28:20+00:00",
            "previous_commit": "7d1332b421ced35feab1fb701cd418e7a9dfab44",
            "files_changed": [
                {
                    "filename": "static/css/styles.css",
                    "status": "modified",
                    "additions": 26,
                    "deletions": 0,
                    "changes": 26,
                    "patch": "@@ -381,3 +381,29 @@ svg {\n #static-state {\r\n     display: block;\r\n }\r\n+\r\n+.powered-by-container {\r\n+    color: white;\r\n+    margin-top: 30px;\r\n+    display: grid;\r\n+    justify-items: center;\r\n+}\r\n+\r\n+.powered-by-container img {\r\n+    width: 100%;\r\n+}\r\n+\r\n+.powered-by-container .logo {\r\n+    width: 65%;\r\n+    margin: 10px;\r\n+}\r\n+\r\n+.powered-by-sub-heading {\r\n+    font-size: small;\r\n+}\r\n+\r\n+#deployed-text {\r\n+    max-width: 150px;\r\n+    text-align: center;\r\n+    text-transform: initial;\r\n+}\r"
                },
                {
                    "filename": "static/images/dev-logo.jpeg",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "templates/index.html",
                    "status": "modified",
                    "additions": 8,
                    "deletions": 0,
                    "changes": 8,
                    "patch": "@@ -63,6 +63,14 @@ <h3>Select Components</h3>\n                     Delete Component\r\n                 </button> \r\n             </div>\r\n+            <div class=\"powered-by-container\">\r\n+                <h4 class=\"powered-by-heading\">Hack-AI Hackathon</h4>\r\n+                <p class=\"powered-by-sub-heading\">POWERED BY NVIDIA & DELL</p>\r\n+                <div class=\"logo\">\r\n+                    <img src=\"../static/images/dev-logo.jpeg\" alt=\"\" srcset=\"\">\r\n+                </div>\r\n+                <p class=\"powered-by-sub-heading\" id=\"deployed-text\">Deployed using NVIDIA AI Workbench</p>\r\n+            </div>\r\n         </div>\r\n \r\n         <div class=\"graph-input-container\">\r"
                }
            ]
        },
        {
            "commit_hash": "7d1332b421ced35feab1fb701cd418e7a9dfab44",
            "message": "Adding processing state and fixing drag drop issue",
            "author": {
                "name": "71ashu",
                "email": "71ashu@gmail.com"
            },
            "timestamp": "2024-09-30T00:02:50+00:00",
            "previous_commit": "7ba4089cfba974b17d05b20d88b777045d9397e4",
            "files_changed": [
                {
                    "filename": "static/css/styles.css",
                    "status": "modified",
                    "additions": 7,
                    "deletions": 0,
                    "changes": 7,
                    "patch": "@@ -374,3 +374,10 @@ svg {\n     margin-top: 80px;\r\n }\r\n \r\n+#loading-state {\r\n+    display: none;\r\n+}\r\n+\r\n+#static-state {\r\n+    display: block;\r\n+}\r"
                },
                {
                    "filename": "static/scripts/api.js",
                    "status": "modified",
                    "additions": 16,
                    "deletions": 0,
                    "changes": 16,
                    "patch": "@@ -8,6 +8,7 @@ const componentsMap = new Map(Array.from(document.querySelectorAll('.component')\n \r\n // Function to send input to Flask and receive graph JSON\r\n async function fetchGraphJson(userInput) {\r\n+    setLoadingState(true);\r\n     try {\r\n         const response = await fetch(apiUrl, {\r\n             method: 'POST',\r\n@@ -23,10 +24,25 @@ async function fetchGraphJson(userInput) {\n \r\n         const graph = await response.json();\r\n         console.log(\"Received graph JSON:\", graph);\r\n+        setLoadingState(false);\r\n         return graph;\r\n \r\n     } catch (error) {\r\n         console.error(\"Error fetching graph JSON:\", error);\r\n+        setLoadingState(false);\r\n+    }\r\n+}\r\n+\r\n+const setLoadingState = (showLoading) => {\r\n+    const staticState = document.getElementById('static-state');\r\n+    const loadingState = document.getElementById('loading-state');\r\n+\r\n+    if(showLoading) {\r\n+        staticState.style.display = 'none';\r\n+        loadingState.style.display = 'block';\r\n+    } else {\r\n+        staticState.style.display = 'block';\r\n+        loadingState.style.display = 'none';\r\n     }\r\n }\r\n \r"
                },
                {
                    "filename": "static/scripts/graph.js",
                    "status": "modified",
                    "additions": 8,
                    "deletions": 7,
                    "changes": 15,
                    "patch": "@@ -369,7 +369,7 @@ function createComponentInGraphWindow(componentId, componentName, componentColor\n     // Add draggable functionality\r\n     newComponent.style.position = 'absolute';  // Absolute positioning\r\n     const componentSize = 60; // Size of the component\r\n-    const labelHeight = 30; // Approximate height of the label\r\n+    const labelHeight = label.offsetHeight; // Approximate height of the label\r\n     const bottomBarHeight = document.querySelector('.input-bar').offsetHeight; // Get the height of the bottom bar\r\n \r\n     // Ensure the component and label appear within the correct boundaries (considering the bottom bar and label height)\r\n@@ -388,6 +388,8 @@ function createComponentInGraphWindow(componentId, componentName, componentColor\n     newComponent.style.top = top + 'px';\r\n     newComponent.style.left = left + 'px';\r\n \r\n+    newComponent.lastElementChild\r\n+\r\n     makeDraggable(newComponent);  // Make the component draggable\r\n \r\n     // Append the component to the main window\r\n@@ -417,17 +419,16 @@ function makeDraggable(element) {\n         mouseX = e.clientX;\r\n         mouseY = e.clientY;\r\n \r\n+        const label = element.lastElementChild;\r\n+\r\n         // Get current component dimensions and position\r\n         const elementWidth = element.offsetWidth;\r\n         const elementHeight = element.offsetHeight;\r\n-        const labelHeight = 30; // Approximate height of the label\r\n+        const labelHeight = label.offsetHeight + 5; // Approximate height of the label\r\n \r\n         // Get the boundaries of the main window\r\n         const windowWidth = graphWindow.offsetWidth;\r\n-        const windowHeight = graphWindow.offsetHeight;\r\n-        \r\n-        // Get the height of the black input bar (bottom bar)\r\n-        const bottomBarHeight = document.querySelector('.input-bar').offsetHeight;\r\n+        const windowHeight = graphWindow.offsetHeight - 10;\r\n \r\n         // Calculate new top and left positions, ensuring the component stays inside the main window\r\n         let newTop = element.offsetTop - offsetY;\r\n@@ -436,7 +437,7 @@ function makeDraggable(element) {\n         // Boundary checks to prevent dragging outside the main window (considering the label)\r\n         if (newTop < 0) newTop = 0; // Prevent moving above the top boundary\r\n         if (newLeft < 0) newLeft = 0; // Prevent moving to the left of the boundary\r\n-        if (newTop + elementHeight + labelHeight > windowHeight - bottomBarHeight) newTop = windowHeight - bottomBarHeight - elementHeight - labelHeight; // Prevent moving below the black line\r\n+        if (newTop + elementHeight + labelHeight > windowHeight) newTop = windowHeight - elementHeight - labelHeight; // Prevent moving below the black line\r\n         if (newLeft + elementWidth > windowWidth) newLeft = windowWidth - elementWidth; // Prevent moving beyond the right boundary\r\n \r\n         // Update the element's position temporarily to check for overlaps\r"
                },
                {
                    "filename": "templates/index.html",
                    "status": "modified",
                    "additions": 6,
                    "deletions": 1,
                    "changes": 7,
                    "patch": "@@ -81,7 +81,12 @@ <h3>Select Components</h3>\n                     </div>\r\n                     <!-- New Send button with an up arrow -->\r\n                     <button id=\"send-button\">\r\n-                        <i class=\"fas fa-arrow-up\"></i> Send\r\n+                        <span id=\"static-state\">\r\n+                            <i class=\"fas fa-arrow-up\"></i> Send\r\n+                        </span>\r\n+                        <span id=\"loading-state\">\r\n+                            Processing... \r\n+                        </span>\r\n                     </button>\r\n                 </div>\r\n             </div>\r"
                }
            ]
        },
        {
            "commit_hash": "7ba4089cfba974b17d05b20d88b777045d9397e4",
            "message": "Adding .gitignore",
            "author": {
                "name": "71ashu",
                "email": "71ashu@gmail.com"
            },
            "timestamp": "2024-09-30T00:02:11+00:00",
            "previous_commit": "4039648aa22b188c0593cde7e65a8aa76b11fa0f",
            "files_changed": [
                {
                    "filename": ".gitignore",
                    "status": "added",
                    "additions": 3,
                    "deletions": 0,
                    "changes": 3,
                    "patch": "@@ -0,0 +1,3 @@\n+.env\n+venv\n+.DS_Store\n\\ No newline at end of file"
                }
            ]
        },
        {
            "commit_hash": "4039648aa22b188c0593cde7e65a8aa76b11fa0f",
            "message": "Merge remote-tracking branch 'origin/main'",
            "author": {
                "name": "71ashu",
                "email": "71ashu@gmail.com"
            },
            "timestamp": "2024-09-30T00:01:00+00:00",
            "previous_commit": "4091c8c251b5b4f4585bc09fa8b796af4009a62d",
            "files_changed": [
                {
                    "filename": "README.md",
                    "status": "modified",
                    "additions": 1,
                    "deletions": 1,
                    "changes": 2,
                    "patch": "@@ -19,7 +19,7 @@ Before running this project, make sure you have the following installed:\n     \n     - Start the local server in Nvidia AI Workbench\n     ![](img/image.png)\n-    <img src=\"image.png\" width=\"200\">\n+   \n \n     - Start new project, where you can clone the new repository from github.\n     ![alt text](img/image-2.png)"
                },
                {
                    "filename": "image-1.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-2.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-3.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-4.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                }
            ]
        },
        {
            "commit_hash": "ae5465db5f11eb43a779a707ede923fa5b7e6298",
            "message": "Update README.md",
            "author": {
                "name": "Yugandhar Desai",
                "email": "yugandhar.d.desai@gmail.com"
            },
            "timestamp": "2024-09-29T23:40:24+00:00",
            "previous_commit": "c7213078abd53ba4e6dec3f2befd1ded2f61e66b",
            "files_changed": [
                {
                    "filename": "README.md",
                    "status": "modified",
                    "additions": 1,
                    "deletions": 1,
                    "changes": 2,
                    "patch": "@@ -19,7 +19,7 @@ Before running this project, make sure you have the following installed:\n     \n     - Start the local server in Nvidia AI Workbench\n     ![](img/image.png)\n-    <img src=\"image.png\" width=\"200\">\n+   \n \n     - Start new project, where you can clone the new repository from github.\n     ![alt text](img/image-2.png)"
                }
            ]
        },
        {
            "commit_hash": "c7213078abd53ba4e6dec3f2befd1ded2f61e66b",
            "message": "Added README.md and screenshots",
            "author": {
                "name": "...",
                "email": ""
            },
            "timestamp": "2024-09-29T23:35:40+00:00",
            "previous_commit": "6b89e43a49ceaa260e58885428474c89ed0c8eae",
            "files_changed": [
                {
                    "filename": "image-1.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-2.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-3.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-4.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image.png",
                    "status": "removed",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                }
            ]
        },
        {
            "commit_hash": "4091c8c251b5b4f4585bc09fa8b796af4009a62d",
            "message": "Merge remote-tracking branch 'origin/main'",
            "author": {
                "name": "71ashu",
                "email": "71ashu@gmail.com"
            },
            "timestamp": "2024-09-29T23:35:03+00:00",
            "previous_commit": "e7fa481a99a943d8404674405f268cf267f685c0",
            "files_changed": [
                {
                    "filename": "README.md",
                    "status": "modified",
                    "additions": 72,
                    "deletions": 0,
                    "changes": 72,
                    "patch": "@@ -0,0 +1,72 @@\n+# AI-Based System Design Builder\n+\n+This project provides an interactive platform for building and simulating system designs using AI. Powered by NVIDIA AI Workbench, it leverages advanced AI capabilities to generate optimized, scalable system architectures. \n+\n+## Prerequisites\n+\n+Before running this project, make sure you have the following installed:\n+\n+- **NVIDIA AI Workbench**: [Installation guide](https://docs.nvidia.com/ai-workbench/user-guide/latest/installation/overview.html)\n+- **Python 3.8+**\n+- **CUDA Toolkit** (for GPU acceleration)\n+- **Docker** (for containerized environments)\n+\n+\n+## Installation \n+\n+1. **Set Up NVIDIA AI Workbench**:\n+    - Follow the [Installation guide](https://docs.nvidia.com/ai-workbench/user-guide/latest/installation/overview.html) to set up the Workbench on your local machine or cloud environment.\n+    \n+    - Start the local server in Nvidia AI Workbench\n+    ![](img/image.png)\n+    <img src=\"image.png\" width=\"200\">\n+\n+    - Start new project, where you can clone the new repository from github.\n+    ![alt text](img/image-2.png)\n+\n+2. **Clone the Repository in the new project**:\n+    ```bash\n+    git clone https://github.com/pvbgeek/AI-based-System-Design-Builder.git\n+    cd AI-based-System-Design-Builder \n+    ```\n+    - After cloning the repository the project should be in a build-ready stage which you can see at the bottom right corner of the AI workbench.\n+    ![alt text](img/image-4.png)\n+\n+3. **Launching NVIDIA Workbench using WSL**\n+\n+- To start the NVIDIA Workbench environment on WSL, use the following command:\n+\n+```bash\n+wsl -d NVIDIA-Workbench --cd ~\n+```\n+![alt text](img/image-5.png)\n+\n+4. **Activate the NVIDIA Workbench Environment**:\n+   Use the following command to activate the local environment:\n+   ```bash\n+   nvwb activate local && nvwb open AI-Based-System-Design-Builder\n+   ```\n+\n+\n+3. **Install Dependencies and Configure environment variables**:\n+    ```bash\n+    pip install -r requirements.txt\n+    ```\n+\n+4. **Run the application on CLI**\n+    ```bash\n+    python main.py\n+    ```\n+![alt text](img/image-6.png)\n+\n+5. **Access the application on https://localhost:5000**\n+\n+6. **Usage**\n+    - For phase I, We came up with a list of components which are essential for any system architecture.\n+    ![alt text](img/image-3.png)\n+    - User can manually select the components and build connections between the components.\n+    - User can also delete components by selecing them.\n+    - User can give audio input through mic functionality to describe the system requirements.\n+    - We have integrated and developed LLM based system design generation, where the user can give a prompt describing his system requirements and then the model can come up with architecture using the components predefined in the application. \n+    ![alt text](img/image-7.png)\n+"
                },
                {
                    "filename": "image-1.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-2.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-3.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-4.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-1.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-2.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-3.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-4.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-5.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-6.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-7.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                }
            ]
        },
        {
            "commit_hash": "6b89e43a49ceaa260e58885428474c89ed0c8eae",
            "message": "Added README.md and screenshots",
            "author": {
                "name": "...",
                "email": ""
            },
            "timestamp": "2024-09-29T23:27:40+00:00",
            "previous_commit": "742d15c7742c36afbad819ede26d3cbe4d923ac3",
            "files_changed": [
                {
                    "filename": "README.md",
                    "status": "modified",
                    "additions": 72,
                    "deletions": 0,
                    "changes": 72,
                    "patch": "@@ -0,0 +1,72 @@\n+# AI-Based System Design Builder\n+\n+This project provides an interactive platform for building and simulating system designs using AI. Powered by NVIDIA AI Workbench, it leverages advanced AI capabilities to generate optimized, scalable system architectures. \n+\n+## Prerequisites\n+\n+Before running this project, make sure you have the following installed:\n+\n+- **NVIDIA AI Workbench**: [Installation guide](https://docs.nvidia.com/ai-workbench/user-guide/latest/installation/overview.html)\n+- **Python 3.8+**\n+- **CUDA Toolkit** (for GPU acceleration)\n+- **Docker** (for containerized environments)\n+\n+\n+## Installation \n+\n+1. **Set Up NVIDIA AI Workbench**:\n+    - Follow the [Installation guide](https://docs.nvidia.com/ai-workbench/user-guide/latest/installation/overview.html) to set up the Workbench on your local machine or cloud environment.\n+    \n+    - Start the local server in Nvidia AI Workbench\n+    ![](img/image.png)\n+    <img src=\"image.png\" width=\"200\">\n+\n+    - Start new project, where you can clone the new repository from github.\n+    ![alt text](img/image-2.png)\n+\n+2. **Clone the Repository in the new project**:\n+    ```bash\n+    git clone https://github.com/pvbgeek/AI-based-System-Design-Builder.git\n+    cd AI-based-System-Design-Builder \n+    ```\n+    - After cloning the repository the project should be in a build-ready stage which you can see at the bottom right corner of the AI workbench.\n+    ![alt text](img/image-4.png)\n+\n+3. **Launching NVIDIA Workbench using WSL**\n+\n+- To start the NVIDIA Workbench environment on WSL, use the following command:\n+\n+```bash\n+wsl -d NVIDIA-Workbench --cd ~\n+```\n+![alt text](img/image-5.png)\n+\n+4. **Activate the NVIDIA Workbench Environment**:\n+   Use the following command to activate the local environment:\n+   ```bash\n+   nvwb activate local && nvwb open AI-Based-System-Design-Builder\n+   ```\n+\n+\n+3. **Install Dependencies and Configure environment variables**:\n+    ```bash\n+    pip install -r requirements.txt\n+    ```\n+\n+4. **Run the application on CLI**\n+    ```bash\n+    python main.py\n+    ```\n+![alt text](img/image-6.png)\n+\n+5. **Access the application on https://localhost:5000**\n+\n+6. **Usage**\n+    - For phase I, We came up with a list of components which are essential for any system architecture.\n+    ![alt text](img/image-3.png)\n+    - User can manually select the components and build connections between the components.\n+    - User can also delete components by selecing them.\n+    - User can give audio input through mic functionality to describe the system requirements.\n+    - We have integrated and developed LLM based system design generation, where the user can give a prompt describing his system requirements and then the model can come up with architecture using the components predefined in the application. \n+    ![alt text](img/image-7.png)\n+"
                },
                {
                    "filename": "image-1.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-2.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-3.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image-4.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "image.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-1.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-2.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-3.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-4.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-5.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-6.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image-7.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "img/image.png",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                }
            ]
        },
        {
            "commit_hash": "e7fa481a99a943d8404674405f268cf267f685c0",
            "message": "requirements.txt file updated",
            "author": {
                "name": "Atharva Weginwar",
                "email": "154084611+Atharva-Weginwar@users.noreply.github.com"
            },
            "timestamp": "2024-09-29T22:59:02+00:00",
            "previous_commit": "742d15c7742c36afbad819ede26d3cbe4d923ac3",
            "files_changed": [
                {
                    "filename": "requirements.txt",
                    "status": "added",
                    "additions": 3,
                    "deletions": 0,
                    "changes": 3,
                    "patch": "@@ -0,0 +1,3 @@\n+python-dotenv\n+Flask\n+openai\n\\ No newline at end of file"
                }
            ]
        },
        {
            "commit_hash": "742d15c7742c36afbad819ede26d3cbe4d923ac3",
            "message": "Files Pre-Deployment",
            "author": {
                "name": "Parth Bhalerao",
                "email": "98455586+pvbgeek@users.noreply.github.com"
            },
            "timestamp": "2024-09-29T20:08:17+00:00",
            "previous_commit": "837f6e3c7d02f4d2594abf6f9b3bbec292b7294a",
            "files_changed": [
                {
                    "filename": "LICENSE",
                    "status": "added",
                    "additions": 21,
                    "deletions": 0,
                    "changes": 21,
                    "patch": "@@ -0,0 +1,21 @@\n+MIT License\n+\n+Copyright (c) 2024 Parth Bhalerao\n+\n+Permission is hereby granted, free of charge, to any person obtaining a copy\n+of this software and associated documentation files (the \"Software\"), to deal\n+in the Software without restriction, including without limitation the rights\n+to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+copies of the Software, and to permit persons to whom the Software is\n+furnished to do so, subject to the following conditions:\n+\n+The above copyright notice and this permission notice shall be included in all\n+copies or substantial portions of the Software.\n+\n+THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+SOFTWARE."
                },
                {
                    "filename": "README.md",
                    "status": "modified",
                    "additions": 0,
                    "deletions": 2,
                    "changes": 2,
                    "patch": "@@ -1,2 +0,0 @@\n-# AI-based-System-Design-Builder\n-Hack-AI-Dell-Nvidia-Hackathon"
                },
                {
                    "filename": "main.py",
                    "status": "added",
                    "additions": 94,
                    "deletions": 0,
                    "changes": 94,
                    "patch": "@@ -0,0 +1,94 @@\n+import json\n+from openai import OpenAI\n+from flask import Flask, request, jsonify, render_template\n+from dotenv import load_dotenv\n+\n+\n+# Loading .env file\n+load_dotenv()\n+\n+import os\n+\n+# Storing API Key from .env file\n+api_key = os.getenv('API_KEY')\n+\n+# Initialize the OpenAI client\n+client = OpenAI(api_key=api_key)\n+\n+app = Flask(__name__)\n+\n+def generate_system_design(user_input):\n+    components = [\n+        \"API gateway\", \"Message queue\", \"CDN\", \"DNS\", \"Firewall\", \"Auth server\",\n+        \"Load balancer\", \"Server\", \"Client\", \"Cache\", \"Database\", \"Cloud\"\n+    ]\n+    \n+    prompt = f\"\"\"\n+    Create a system design for: \"{user_input}\"\n+    Use the following components: {', '.join(components)}\n+    Represent each component instance as a JSON object with \"component\", \"id\", and \"adjacencyList\" fields.\n+    Example: {{\"component\": \"Firewall\", \"id\": 1, \"adjacencyList\": []}}\n+    Use unique integer IDs for all components, preferably single or double-digit.\n+    Provide the design as a valid JSON array, where each element is an object containing \"component\", \"id\", and \"adjacencyList\" fields.\n+    The \"adjacencyList\" should be an array of objects representing the components it directly interacts with.\n+    \n+    Follow these guidelines:\n+    1. Client instances can interact with DNS, API gateway, and CDN instances.\n+    2. DNS instances can interact with CDN and API gateway instances.\n+    3. API gateway instances can interact with Auth server, Load balancer, and Cache instances.\n+    4. Firewall protects backend components from direct client access.\n+    5. Load Balancer instances distribute traffic among Server instances.\n+    6. Server instances can interact with Database, Cache, and Message Queue instances.\n+    7. Cloud is a single component that can interact with any other component if relevant.\n+    8. Components can have bidirectional relationships where appropriate.\n+    \n+    Ensure the output is a valid JSON array. Do not include any explanations, only the JSON array.\n+    \"\"\"\n+    \n+    try:\n+        response = client.chat.completions.create(\n+            model=\"gpt-4\",\n+            messages=[\n+                {\"role\": \"system\", \"content\": \"You are a helpful assistant that creates system design adjacency lists in JSON array format.\"},\n+                {\"role\": \"user\", \"content\": prompt}\n+            ],\n+            temperature=0.7,\n+            max_tokens=1000\n+        )\n+        \n+        adjacency_list_str = response.choices[0].message.content.strip()\n+        adjacency_list = json.loads(adjacency_list_str)\n+        \n+        return adjacency_list\n+    \n+    except Exception as e:\n+        print(\"An exception occurred:\", str(e))\n+        return {\"error\": f\"An error occurred: {str(e)}\"}\n+\n+@app.route('/')\n+def home():\n+    # Serve index.html from the templates directory\n+    return render_template('index.html')\n+\n+@app.route('/generate', methods=['POST'])\n+def generate_design():\n+    try:\n+        # Extract user input from the request\n+        data = request.json\n+        user_input = data.get('userInput', '')\n+        if not user_input:\n+            return jsonify({\"error\": \"No user input provided.\"}), 400\n+\n+        # Generate system design JSON\n+        result = generate_system_design(user_input)\n+\n+        # Return the result as JSON response\n+        return jsonify(result), 200\n+\n+    except Exception as e:\n+        # Return error if any occurs\n+        return jsonify({\"error\": str(e)}), 500\n+\n+if __name__ == \"__main__\":\n+    # Run the Flask app\n+    app.run(debug=True)"
                },
                {
                    "filename": "static/components/build_path.js",
                    "status": "added",
                    "additions": 1324,
                    "deletions": 0,
                    "changes": 1324,
                    "patch": "@@ -0,0 +1,1324 @@\n+/*// Log when build_path.js is loaded\r\n+console.log(\"build_path.js is loaded\");\r\n+\r\n+// Disable default right-click context menu globally (for testing)\r\n+document.addEventListener('contextmenu', function(event) {\r\n+    event.preventDefault();  // Prevent the default browser menu\r\n+    console.log(\"Global contextmenu event triggered\");\r\n+});\r\n+\r\n+// Function to create the right-click context menu\r\n+function createContextMenu(event, component) {\r\n+    console.log(\"Right-clicked on component:\", component.id);\r\n+\r\n+    // Prevent default right-click menu\r\n+    event.preventDefault();  // Important: This should stop the browser's default context menu\r\n+\r\n+    // Remove any existing context menus\r\n+    const existingMenu = document.querySelector('.context-menu');\r\n+    if (existingMenu) {\r\n+        console.log(\"Removing existing context menu\");\r\n+        existingMenu.remove();\r\n+    }\r\n+\r\n+    // Create the context menu\r\n+    console.log(\"Creating context menu for component:\", component.id);\r\n+    \r\n+    const menu = document.createElement('div');\r\n+    menu.classList.add('context-menu');\r\n+    \r\n+    // Add \"Make a Connection\" option with an icon\r\n+    const makeConnection = document.createElement('div');\r\n+    makeConnection.classList.add('context-menu-item');\r\n+    makeConnection.innerHTML = '<i class=\"fas fa-link\"></i> Make a Connection';\r\n+    makeConnection.addEventListener('click', function() {\r\n+        console.log(\"Make a Connection clicked for component:\", component.id);\r\n+        startConnection(component);\r\n+        menu.remove();  // Remove the menu after clicking\r\n+    });\r\n+\r\n+    // Add \"Delete Component\" option with an icon\r\n+    const deleteComponent = document.createElement('div');\r\n+    deleteComponent.classList.add('context-menu-item');\r\n+    deleteComponent.innerHTML = '<i class=\"fas fa-trash\"></i> Delete Component';\r\n+    deleteComponent.addEventListener('click', function() {\r\n+        console.log(\"Delete Component clicked for component:\", component.id);\r\n+        deleteComponentFromWindow(component);\r\n+        menu.remove();  // Remove the menu after clicking\r\n+    });\r\n+\r\n+    // Append options to the menu\r\n+    menu.appendChild(makeConnection);\r\n+    menu.appendChild(deleteComponent);\r\n+\r\n+    // Style and position the menu near the mouse click\r\n+    menu.style.top = `${event.pageY}px`;\r\n+    menu.style.left = `${event.pageX}px`;\r\n+\r\n+    console.log(\"Context menu added to the DOM at position:\", event.pageY, event.pageX);\r\n+\r\n+    // Append the menu to the document\r\n+    document.body.appendChild(menu);\r\n+\r\n+    // Remove the menu when clicking outside\r\n+    document.addEventListener('click', function removeMenu() {\r\n+        menu.remove();\r\n+        console.log(\"Context menu removed\");\r\n+        document.removeEventListener('click', removeMenu);\r\n+    });\r\n+}\r\n+\r\n+// Add right-click event to each component in the main window\r\n+function addContextMenuToComponent(component) {\r\n+    console.log(\"Adding right-click (contextmenu) event to component:\", component.id);\r\n+    \r\n+    component.addEventListener('contextmenu', function(event) {\r\n+        console.log(\"Right-click detected on component:\", component.id);\r\n+        event.preventDefault();  // Ensure this prevents the default browser context menu\r\n+        createContextMenu(event, component);\r\n+    });\r\n+}\r\n+\r\n+// Check if the components in the main window are selected\r\n+const graphComponents = document.querySelectorAll('.graph-component');  // Renamed to graphComponents\r\n+console.log(\"Number of graph components found:\", graphComponents.length);\r\n+\r\n+// Attach context menu to each component\r\n+graphComponents.forEach(component => {\r\n+    console.log(\"Adding contextmenu listener to graph component:\", component.id);\r\n+    addContextMenuToComponent(component);\r\n+});*/\r\n+\r\n+\r\n+/*// Remove the duplicate declaration of graphWindow if it's already declared in graph.js\r\n+// Assuming graphWindow is already declared in graph.js and accessible globally\r\n+\r\n+// Variable to track if we're in connection mode\r\n+let connectionMode = false;\r\n+let startComponent = null;\r\n+let endComponent = null;\r\n+\r\n+// Add event listeners for left-clicking graph components to start and confirm connections\r\n+document.addEventListener('click', handleComponentClick);\r\n+document.addEventListener('contextmenu', cancelConnectionOnRightClick);\r\n+\r\n+function handleComponentClick(event) {\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+\r\n+    if (connectionMode) {\r\n+        if (clickedComponent && clickedComponent !== startComponent) {\r\n+            // Second click to confirm connection\r\n+            endComponent = clickedComponent;\r\n+            console.log(`Second component clicked: ${endComponent.getAttribute('data-tooltip')}`);\r\n+            createArrowBetweenComponents(startComponent, endComponent);\r\n+            cleanupAfterConnection();\r\n+        } else {\r\n+            console.log(\"Clicked outside. Cancelling connection.\");\r\n+            cleanupAfterConnection();\r\n+        }\r\n+    } else if (clickedComponent) {\r\n+        // First click to start connection\r\n+        startComponent = clickedComponent;\r\n+        console.log(`First component clicked: ${startComponent.getAttribute('data-tooltip')}`);\r\n+        connectionMode = true;\r\n+        startComponent.classList.add('selected');\r\n+    }\r\n+}\r\n+\r\n+function cancelConnectionOnRightClick(event) {\r\n+    if (connectionMode) {\r\n+        console.log(\"Right-click detected, cancelling connection.\");\r\n+        cleanupAfterConnection();\r\n+    }\r\n+}\r\n+\r\n+function createArrowBetweenComponents(startComponent, endComponent) {\r\n+    console.log(`Creating an arrow between: ${startComponent.getAttribute('data-tooltip')} and ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+    const startPos = getComponentCenterPosition(startComponent);\r\n+    const endPos = getComponentCenterPosition(endComponent);\r\n+\r\n+    console.log(`Start Component Position: (${startPos.x}, ${startPos.y})`);\r\n+    console.log(`End Component Position: (${endPos.x}, ${endPos.y})`);\r\n+\r\n+    const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+    const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+    console.log(`Relative Start: (${relativeStart.x}, ${relativeStart.y}), Relative End: (${relativeEnd.x}, ${relativeEnd.y})`);\r\n+\r\n+    drawArrow(relativeStart, relativeEnd);\r\n+}\r\n+\r\n+function drawArrow(start, end) {\r\n+    const svg = d3.select(graphWindow).select('svg');\r\n+    if (svg.empty()) {\r\n+        console.log(\"Creating new SVG container\");\r\n+        d3.select(graphWindow).append('svg')\r\n+            .attr('width', '100%')\r\n+            .attr('height', '100%')\r\n+            .style('position', 'absolute')\r\n+            .style('top', 0)\r\n+            .style('left', 0);\r\n+    }\r\n+\r\n+    // Redraw the SVG selection to ensure the container exists\r\n+    const svgContainer = d3.select(graphWindow).select('svg');\r\n+\r\n+    console.log(\"Drawing line with coordinates:\");\r\n+    console.log(`Start: (${start.x}, ${start.y})`);\r\n+    console.log(`End: (${end.x}, ${end.y})`);\r\n+\r\n+    svgContainer.append('line')\r\n+        .attr('x1', start.x)\r\n+        .attr('y1', start.y)\r\n+        .attr('x2', end.x)\r\n+        .attr('y2', end.y)\r\n+        .attr('stroke', 'black')\r\n+        .attr('stroke-width', 2);\r\n+}\r\n+\r\n+// Get the center position of a component for arrow drawing\r\n+function getComponentCenterPosition(component) {\r\n+    const rect = component.getBoundingClientRect();\r\n+    return {\r\n+        x: rect.left + rect.width / 2,\r\n+        y: rect.top + rect.height / 2\r\n+    };\r\n+}\r\n+\r\n+// Cleanup after connection is done or cancelled\r\n+function cleanupAfterConnection() {\r\n+    connectionMode = false;\r\n+    startComponent?.classList.remove('selected');\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+}\r\n+\r\n+// Cancelling the connection if the user right-clicks\r\n+function cancelConnection(event) {\r\n+    console.log(\"Right-click detected, cancelling connection.\");\r\n+    cleanupAfterConnection();\r\n+}\r\n+\r\n+// Handle right-click events to cancel ongoing connections\r\n+function cancelConnectionOnRightClick(event) {\r\n+    event.preventDefault();\r\n+    if (connectionMode) {\r\n+        console.log(\"Right-click detected, cancelling connection.\");\r\n+        cleanupAfterConnection();\r\n+    }\r\n+}*/\r\n+\r\n+\r\n+/*// Assuming graphWindow is already declared in graph.js and accessible globally\r\n+let connectionMode = false;\r\n+let startComponent = null;\r\n+let endComponent = null;\r\n+let connections = []; // Array to store connections\r\n+\r\n+// Add event listeners for left-clicking graph components to start and confirm connections\r\n+document.addEventListener('click', handleComponentClick);\r\n+document.addEventListener('contextmenu', cancelConnectionOnRightClick);\r\n+\r\n+function handleComponentClick(event) {\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+\r\n+    if (connectionMode) {\r\n+        if (clickedComponent && clickedComponent !== startComponent) {\r\n+            // Second click to confirm connection\r\n+            endComponent = clickedComponent;\r\n+            console.log(`Second component clicked: ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+            // Check if the connection already exists\r\n+            const connectionExists = connections.some(conn => {\r\n+                return (\r\n+                    (conn.start === startComponent && conn.end === endComponent) ||\r\n+                    (conn.start === endComponent && conn.end === startComponent)\r\n+                );\r\n+            });\r\n+\r\n+            if (!connectionExists) {\r\n+                createArrowBetweenComponents(startComponent, endComponent);\r\n+                connections.push({ start: startComponent, end: endComponent });\r\n+            } else {\r\n+                console.log(\"Connection already exists. No new arrow drawn.\");\r\n+            }\r\n+            \r\n+            cleanupAfterConnection();\r\n+        } else {\r\n+            console.log(\"Clicked outside. Cancelling connection.\");\r\n+            cleanupAfterConnection();\r\n+        }\r\n+    } else if (clickedComponent) {\r\n+        // First click to start connection\r\n+        startComponent = clickedComponent;\r\n+        console.log(`First component clicked: ${startComponent.getAttribute('data-tooltip')}`);\r\n+        connectionMode = true;\r\n+        startComponent.classList.add('selected');\r\n+    }\r\n+}\r\n+\r\n+function cancelConnectionOnRightClick(event) {\r\n+    if (connectionMode) {\r\n+        console.log(\"Right-click detected, cancelling connection.\");\r\n+        cleanupAfterConnection();\r\n+    }\r\n+}\r\n+\r\n+function createArrowBetweenComponents(startComponent, endComponent) {\r\n+    console.log(`Creating an arrow between: ${startComponent.getAttribute('data-tooltip')} and ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+    const startPos = getComponentCenterPosition(startComponent);\r\n+    const endPos = getComponentCenterPosition(endComponent);\r\n+\r\n+    console.log(`Start Component Position: (${startPos.x}, ${startPos.y})`);\r\n+    console.log(`End Component Position: (${endPos.x}, ${endPos.y})`);\r\n+\r\n+    const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+    const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+    console.log(`Relative Start: (${relativeStart.x}, ${relativeStart.y}), Relative End: (${relativeEnd.x}, ${relativeEnd.y})`);\r\n+\r\n+    const line = drawArrow(relativeStart, relativeEnd);\r\n+\r\n+    // Store the arrow for future reference and updating\r\n+    connections.push({ start: startComponent, end: endComponent, line });\r\n+\r\n+    // Add drag event listeners to keep the arrow attached when components are dragged\r\n+    makeArrowFollowComponents(startComponent, endComponent, line);\r\n+}\r\n+\r\n+// Function to draw an arrow between two components\r\n+function drawArrow(start, end) {\r\n+    const svg = d3.select(graphWindow).select('svg');\r\n+    if (svg.empty()) {\r\n+        console.log(\"Creating new SVG container with arrowhead marker\");\r\n+        d3.select(graphWindow).append('svg')\r\n+            .attr('width', '100%')\r\n+            .attr('height', '100%')\r\n+            .style('position', 'absolute')\r\n+            .style('top', 0)\r\n+            .style('left', 0)\r\n+            .append('defs') // Define arrowhead in the SVG defs section\r\n+            .append('marker')\r\n+            .attr('id', 'arrowhead')\r\n+            .attr('viewBox', '0 0 10 10')\r\n+            .attr('refX', 7)\r\n+            .attr('refY', 5)\r\n+            .attr('markerWidth', 6)\r\n+            .attr('markerHeight', 6)\r\n+            .attr('orient', 'auto')\r\n+            .append('path')\r\n+            .attr('d', 'M 0 0 L 10 5 L 0 10 Z') // This defines a triangular arrowhead\r\n+            .attr('fill', 'black'); // Set arrowhead color\r\n+    }\r\n+\r\n+    const svgContainer = d3.select(graphWindow).select('svg');\r\n+\r\n+    console.log(\"Drawing line with coordinates:\");\r\n+    console.log(`Start: (${start.x}, ${start.y})`);\r\n+    console.log(`End: (${end.x}, ${end.y})`);\r\n+\r\n+    return svgContainer.append('line')\r\n+        .attr('x1', start.x)\r\n+        .attr('y1', start.y)\r\n+        .attr('x2', end.x)\r\n+        .attr('y2', end.y)\r\n+        .attr('stroke', 'black')\r\n+        .attr('stroke-width', 2)\r\n+        .attr('marker-end', 'url(#arrowhead)'); // Attach the arrowhead at the end of the line\r\n+}\r\n+\r\n+\r\n+// Function to make the arrow follow the components while dragging\r\n+function makeArrowFollowComponents(startComponent, endComponent, line) {\r\n+    const updateLinePosition = () => {\r\n+        const startPos = getComponentCenterPosition(startComponent);\r\n+        const endPos = getComponentCenterPosition(endComponent);\r\n+\r\n+        const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+        const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+        line\r\n+            .attr('x1', relativeStart.x)\r\n+            .attr('y1', relativeStart.y)\r\n+            .attr('x2', relativeEnd.x)\r\n+            .attr('y2', relativeEnd.y);\r\n+    };\r\n+\r\n+    // Bind the dragging event to update the arrow's position\r\n+    startComponent.addEventListener('mousemove', updateLinePosition);\r\n+    endComponent.addEventListener('mousemove', updateLinePosition);\r\n+}\r\n+\r\n+// Get the center position of a component for arrow drawing\r\n+function getComponentCenterPosition(component) {\r\n+    const rect = component.getBoundingClientRect();\r\n+    return {\r\n+        x: rect.left + rect.width / 2,\r\n+        y: rect.top + rect.height / 2\r\n+    };\r\n+}\r\n+\r\n+// Cleanup after connection is done or cancelled\r\n+function cleanupAfterConnection() {\r\n+    connectionMode = false;\r\n+    startComponent?.classList.remove('selected');\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+}*/\r\n+\r\n+\r\n+/*// Assuming graphWindow is already declared in graph.js and accessible globally\r\n+let connectionMode = false;\r\n+let startComponent = null;\r\n+let endComponent = null;\r\n+let connections = []; // Array to store connections\r\n+\r\n+// Disable new component adding while building a connection\r\n+function disableComponentAdding() {\r\n+    const components = document.querySelectorAll('.component');\r\n+    components.forEach(comp => comp.style.pointerEvents = 'none');\r\n+}\r\n+\r\n+// Re-enable adding new components\r\n+function enableComponentAdding() {\r\n+    const components = document.querySelectorAll('.component');\r\n+    components.forEach(comp => comp.style.pointerEvents = 'auto');\r\n+}\r\n+\r\n+// Initialize the \"Build Connection\" process\r\n+function initiateBuildConnection() {\r\n+    // Disable adding new components\r\n+    disableComponentAdding();\r\n+\r\n+    // Enter connection mode\r\n+    connectionMode = true;\r\n+    console.log(\"Connection mode enabled. Select two components to connect.\");\r\n+}\r\n+\r\n+// Add event listeners to the components to detect clicks for connection\r\n+document.addEventListener('click', handleComponentClick);\r\n+\r\n+// Handle component clicks for building connections\r\n+function handleComponentClick(event) {\r\n+    if (!connectionMode) return; // Only handle clicks in connection mode\r\n+\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+\r\n+    if (clickedComponent && !startComponent) {\r\n+        // First component clicked to start connection\r\n+        startComponent = clickedComponent;\r\n+        console.log(`First component clicked: ${startComponent.getAttribute('data-tooltip')}`);\r\n+        startComponent.classList.add('selected'); // Highlight the selected component\r\n+    } else if (clickedComponent && clickedComponent !== startComponent) {\r\n+        // Second component clicked to establish connection\r\n+        endComponent = clickedComponent;\r\n+        console.log(`Second component clicked: ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+        // Prevent multiple connections between the same components\r\n+        const connectionExists = connections.some(conn => {\r\n+            return (\r\n+                (conn.start === startComponent && conn.end === endComponent) ||\r\n+                (conn.start === endComponent && conn.end === startComponent)\r\n+            );\r\n+        });\r\n+\r\n+        if (connectionExists) {\r\n+            console.log(\"Connection already exists between these two components. No new arrow created.\");\r\n+        } else {\r\n+            // Create arrow connection between the two components\r\n+            createConnection(startComponent, endComponent);\r\n+        }\r\n+        \r\n+        // Reset connection mode\r\n+        cleanupAfterConnection();\r\n+    }\r\n+}\r\n+\r\n+// Function to create an arrow connection between two components\r\n+function createConnection(startComponent, endComponent) {\r\n+    if (!startComponent || !endComponent) {\r\n+        console.log(\"Invalid start or end component. Cannot create a connection.\");\r\n+        return;\r\n+    }\r\n+\r\n+    console.log(`Creating an arrow between: ${startComponent.getAttribute('data-tooltip')} and ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+    const startPos = getComponentCenterPosition(startComponent);\r\n+    const endPos = getComponentCenterPosition(endComponent);\r\n+\r\n+    console.log(`Start Component Position: (${startPos.x}, ${startPos.y})`);\r\n+    console.log(`End Component Position: (${endPos.x}, ${endPos.y})`);\r\n+\r\n+    const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+    const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+    console.log(`Relative Start: (${relativeStart.x}, ${relativeStart.y}), Relative End: (${relativeEnd.x}, ${relativeEnd.y})`);\r\n+\r\n+    const line = drawArrow(relativeStart, relativeEnd);\r\n+\r\n+    // Store the arrow for future reference and updating\r\n+    connections.push({ start: startComponent, end: endComponent, line });\r\n+\r\n+    // Add drag event listeners to keep the arrow attached when components are dragged\r\n+    makeArrowFollowComponents(startComponent, endComponent, line);\r\n+}\r\n+\r\n+// Function to clean up after the connection is made\r\n+function cleanupAfterConnection() {\r\n+    connectionMode = false;\r\n+    startComponent?.classList.remove('selected');\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+\r\n+    // Re-enable adding new components\r\n+    enableComponentAdding();\r\n+    console.log(\"Connection mode disabled.\");\r\n+}\r\n+\r\n+// Get the center position of a component for arrow drawing\r\n+function getComponentCenterPosition(component) {\r\n+    const rect = component.getBoundingClientRect();\r\n+    return {\r\n+        x: rect.left + rect.width / 2,\r\n+        y: rect.top + rect.height / 2\r\n+    };\r\n+}\r\n+\r\n+// Function to draw an arrow between two components\r\n+function drawArrow(start, end) {\r\n+    const svg = d3.select(graphWindow).select('svg');\r\n+    if (svg.empty()) {\r\n+        console.log(\"Creating new SVG container with arrowhead marker\");\r\n+        d3.select(graphWindow).append('svg')\r\n+            .attr('width', '100%')\r\n+            .attr('height', '100%')\r\n+            .style('position', 'absolute')\r\n+            .style('top', 0)\r\n+            .style('left', 0)\r\n+            .append('defs') // Define arrowhead in the SVG defs section\r\n+            .append('marker')\r\n+            .attr('id', 'arrowhead')\r\n+            .attr('viewBox', '0 0 10 10')\r\n+            .attr('refX', 7)\r\n+            .attr('refY', 5)\r\n+            .attr('markerWidth', 6)\r\n+            .attr('markerHeight', 6)\r\n+            .attr('orient', 'auto')\r\n+            .append('path')\r\n+            .attr('d', 'M 0 0 L 10 5 L 0 10 Z') // This defines a triangular arrowhead\r\n+            .attr('fill', 'black'); // Set arrowhead color\r\n+    }\r\n+\r\n+    const svgContainer = d3.select(graphWindow).select('svg');\r\n+\r\n+    console.log(\"Drawing line with coordinates:\");\r\n+    console.log(`Start: (${start.x}, ${start.y})`);\r\n+    console.log(`End: (${end.x}, ${end.y})`);\r\n+\r\n+    return svgContainer.append('line')\r\n+        .attr('x1', start.x)\r\n+        .attr('y1', start.y)\r\n+        .attr('x2', end.x)\r\n+        .attr('y2', end.y)\r\n+        .attr('stroke', 'black')\r\n+        .attr('stroke-width', 2)\r\n+        .attr('marker-end', 'url(#arrowhead)'); // Attach the arrowhead at the end of the line\r\n+}\r\n+\r\n+// Function to make the arrow follow the components while dragging\r\n+function makeArrowFollowComponents(startComponent, endComponent, line) {\r\n+    const updateLinePosition = () => {\r\n+        const startPos = getComponentCenterPosition(startComponent);\r\n+        const endPos = getComponentCenterPosition(endComponent);\r\n+\r\n+        const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+        const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+        line\r\n+            .attr('x1', relativeStart.x)\r\n+            .attr('y1', relativeStart.y)\r\n+            .attr('x2', relativeEnd.x)\r\n+            .attr('y2', relativeEnd.y);\r\n+    };\r\n+\r\n+    // Bind the dragging event to update the arrow's position\r\n+    startComponent.addEventListener('mousemove', updateLinePosition);\r\n+    endComponent.addEventListener('mousemove', updateLinePosition);\r\n+}\r\n+\r\n+// Event listener for the \"Build Connection\" button\r\n+document.getElementById('build-connection').addEventListener('click', initiateBuildConnection);*/\r\n+\r\n+/*// Assuming graphWindow is already declared in graph.js and accessible globally\r\n+let connectionMode = false;\r\n+let deleteMode = false;\r\n+let startComponent = null;\r\n+let endComponent = null;\r\n+let connections = []; // Array to store connections\r\n+\r\n+// Disable new component adding while building a connection\r\n+function disableComponentAdding() {\r\n+    const components = document.querySelectorAll('.component');\r\n+    components.forEach(comp => comp.style.pointerEvents = 'none');\r\n+}\r\n+\r\n+// Re-enable adding new components\r\n+function enableComponentAdding() {\r\n+    const components = document.querySelectorAll('.component');\r\n+    components.forEach(comp => comp.style.pointerEvents = 'auto');\r\n+}\r\n+\r\n+// Initialize the \"Build Connection\" process\r\n+function initiateBuildConnection() {\r\n+    // Disable adding new components\r\n+    disableComponentAdding();\r\n+\r\n+    // Change the button color to red to indicate an ongoing process\r\n+    const buildConnectionButton = document.getElementById('build-connection');\r\n+    buildConnectionButton.style.backgroundColor = 'red';\r\n+    buildConnectionButton.textContent = 'Building...';\r\n+\r\n+    // Enter connection mode\r\n+    connectionMode = true;\r\n+    console.log(\"Connection mode enabled. Select two components to connect.\");\r\n+}\r\n+\r\n+// Initialize the \"Delete\" process\r\n+function initiateDelete() {\r\n+    // Disable adding new components\r\n+    disableComponentAdding();\r\n+\r\n+    // Change the button color to red to indicate an ongoing process\r\n+    const deleteButton = document.getElementById('delete');\r\n+    deleteButton.style.backgroundColor = 'red';\r\n+    deleteButton.textContent = 'Deleting...';\r\n+\r\n+    // Enter delete mode\r\n+    deleteMode = true;\r\n+    console.log(\"Delete mode enabled. Select a component to delete.\");\r\n+}\r\n+\r\n+// Add event listeners to the components to detect clicks for connection or deletion\r\n+document.addEventListener('click', handleComponentClick);\r\n+\r\n+// Handle component clicks for building connections or deleting components\r\n+function handleComponentClick(event) {\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+\r\n+    if (connectionMode && clickedComponent && !startComponent) {\r\n+        // First component clicked to start connection\r\n+        startComponent = clickedComponent;\r\n+        console.log(`First component clicked: ${startComponent.getAttribute('data-tooltip')}`);\r\n+        startComponent.classList.add('selected'); // Highlight the selected component\r\n+    } else if (connectionMode && clickedComponent && clickedComponent !== startComponent) {\r\n+        // Second component clicked to establish connection\r\n+        endComponent = clickedComponent;\r\n+        console.log(`Second component clicked: ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+        // Prevent multiple connections between the same components\r\n+        const connectionExists = connections.some(conn => {\r\n+            return (\r\n+                (conn.start === startComponent && conn.end === endComponent) ||\r\n+                (conn.start === endComponent && conn.end === startComponent)\r\n+            );\r\n+        });\r\n+\r\n+        if (connectionExists) {\r\n+            console.log(\"Connection already exists between these two components. No new arrow created.\");\r\n+        } else {\r\n+            // Create arrow connection between the two components\r\n+            createConnection(startComponent, endComponent);\r\n+        }\r\n+\r\n+        // Reset connection mode\r\n+        cleanupAfterConnection();\r\n+    }\r\n+\r\n+    // Handle delete mode\r\n+    if (deleteMode && clickedComponent) {\r\n+        console.log(`Component clicked for deletion: ${clickedComponent.getAttribute('data-tooltip')}`);\r\n+        deleteComponent(clickedComponent);\r\n+        cleanupAfterDelete();\r\n+    }\r\n+}\r\n+\r\n+// Function to create an arrow connection between two components\r\n+function createConnection(startComponent, endComponent) {\r\n+    if (!startComponent || !endComponent) {\r\n+        console.log(\"Invalid start or end component. Cannot create a connection.\");\r\n+        return;\r\n+    }\r\n+\r\n+    console.log(`Creating an arrow between: ${startComponent.getAttribute('data-tooltip')} and ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+    const startPos = getComponentCenterPosition(startComponent);\r\n+    const endPos = getComponentCenterPosition(endComponent);\r\n+\r\n+    const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+    const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+    const line = drawArrow(relativeStart, relativeEnd);\r\n+\r\n+    // Store the arrow for future reference and updating\r\n+    connections.push({ start: startComponent, end: endComponent, line });\r\n+\r\n+    // Add drag event listeners to keep the arrow attached when components are dragged\r\n+    makeArrowFollowComponents(startComponent, endComponent, line);\r\n+}\r\n+\r\n+// Function to delete a component and its associated connections\r\n+function deleteComponent(component) {\r\n+    // Remove the component from the DOM\r\n+    component.remove();\r\n+\r\n+    // Filter out all connections associated with the component\r\n+    connections = connections.filter(conn => {\r\n+        if (conn.start === component || conn.end === component) {\r\n+            // Remove the arrow from the SVG\r\n+            conn.line.remove();\r\n+            return false;\r\n+        }\r\n+        return true;\r\n+    });\r\n+\r\n+    console.log(`Deleted component and associated connections.`);\r\n+}\r\n+\r\n+// Function to clean up after the connection is made\r\n+function cleanupAfterConnection() {\r\n+    connectionMode = false;\r\n+    startComponent?.classList.remove('selected');\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+\r\n+    // Re-enable adding new components\r\n+    enableComponentAdding();\r\n+\r\n+    // Revert the button color back to normal\r\n+    const buildConnectionButton = document.getElementById('build-connection');\r\n+    buildConnectionButton.style.backgroundColor = '#007BFF'; // Blue color\r\n+    buildConnectionButton.textContent = 'Build Connection';\r\n+\r\n+    console.log(\"Connection mode disabled.\");\r\n+}\r\n+\r\n+// Function to clean up after the deletion is done\r\n+function cleanupAfterDelete() {\r\n+    deleteMode = false;\r\n+\r\n+    // Re-enable adding new components\r\n+    enableComponentAdding();\r\n+\r\n+    // Revert the button color back to normal\r\n+    const deleteButton = document.getElementById('delete');\r\n+    deleteButton.style.backgroundColor = '#007BFF'; // Blue color\r\n+    deleteButton.textContent = 'Delete';\r\n+\r\n+    console.log(\"Delete mode disabled.\");\r\n+}\r\n+\r\n+// Get the center position of a component for arrow drawing\r\n+function getComponentCenterPosition(component) {\r\n+    const rect = component.getBoundingClientRect();\r\n+    return {\r\n+        x: rect.left + rect.width / 2,\r\n+        y: rect.top + rect.height / 2\r\n+    };\r\n+}\r\n+\r\n+// Function to draw an arrow between two components\r\n+function drawArrow(start, end) {\r\n+    const svg = d3.select(graphWindow).select('svg');\r\n+    if (svg.empty()) {\r\n+        d3.select(graphWindow).append('svg')\r\n+            .attr('width', '100%')\r\n+            .attr('height', '100%')\r\n+            .style('position', 'absolute')\r\n+            .style('top', 0)\r\n+            .style('left', 0)\r\n+            .append('defs') // Define arrowhead in the SVG defs section\r\n+            .append('marker')\r\n+            .attr('id', 'arrowhead')\r\n+            .attr('viewBox', '0 0 10 10')\r\n+            .attr('refX', 7)\r\n+            .attr('refY', 5)\r\n+            .attr('markerWidth', 6)\r\n+            .attr('markerHeight', 6)\r\n+            .attr('orient', 'auto')\r\n+            .append('path')\r\n+            .attr('d', 'M 0 0 L 10 5 L 0 10 Z') // This defines a triangular arrowhead\r\n+            .attr('fill', 'black'); // Set arrowhead color\r\n+    }\r\n+\r\n+    const svgContainer = d3.select(graphWindow).select('svg');\r\n+\r\n+    return svgContainer.append('line')\r\n+        .attr('x1', start.x)\r\n+        .attr('y1', start.y)\r\n+        .attr('x2', end.x)\r\n+        .attr('y2', end.y)\r\n+        .attr('stroke', 'black')\r\n+        .attr('stroke-width', 2)\r\n+        .attr('marker-end', 'url(#arrowhead)'); // Attach the arrowhead at the end of the line\r\n+}\r\n+\r\n+// Function to make the arrow follow the components while dragging\r\n+function makeArrowFollowComponents(startComponent, endComponent, line) {\r\n+    const updateLinePosition = () => {\r\n+        const startPos = getComponentCenterPosition(startComponent);\r\n+        const endPos = getComponentCenterPosition(endComponent);\r\n+\r\n+        const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+        const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+        line\r\n+            .attr('x1', relativeStart.x)\r\n+            .attr('y1', relativeStart.y)\r\n+            .attr('x2', relativeEnd.x)\r\n+            .attr('y2', relativeEnd.y);\r\n+    };\r\n+\r\n+    // Bind the dragging event to update the arrow's position\r\n+    startComponent.addEventListener('mousemove', updateLinePosition);\r\n+    endComponent.addEventListener('mousemove', updateLinePosition);\r\n+}\r\n+\r\n+// Event listener for the \"Build Connection\" button\r\n+document.getElementById('build-connection').addEventListener('click', initiateBuildConnection);\r\n+\r\n+// Event listener for the \"Delete\" button\r\n+document.getElementById('delete').addEventListener('click', initiateDelete);*/\r\n+\r\n+\r\n+/*// Variables to track state\r\n+let connectionMode = false;\r\n+let deleteMode = false;\r\n+let startComponent = null;\r\n+let endComponent = null;\r\n+let connections = []; // Array to store connections\r\n+\r\n+console.log(\"Script Loaded\");\r\n+\r\n+// Add event listeners for Build Connection and Delete buttons\r\n+document.getElementById('build-connection').addEventListener('click', () => {\r\n+    connectionMode = true;\r\n+    deleteMode = false;\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+\r\n+    console.log(\"Build Connection Mode Enabled\");\r\n+\r\n+    // Disable component selection and update button text and color\r\n+    disableComponentSelection();\r\n+    document.getElementById('build-connection').textContent = 'Building...';  // Update text to indicate active mode\r\n+    document.getElementById('build-connection').style.backgroundColor = 'red';  // Change button color to red\r\n+    document.getElementById('delete').style.backgroundColor = '#007BFF';  // Reset delete button color\r\n+\r\n+    // Attach click event listeners to components when in build mode\r\n+    document.querySelectorAll('.graph-component').forEach(component => {\r\n+        component.addEventListener('click', handleComponentClickForConnection);\r\n+    });\r\n+});\r\n+\r\n+document.getElementById('delete').addEventListener('click', () => {\r\n+    deleteMode = true;\r\n+    connectionMode = false;\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+\r\n+    console.log(\"Delete Mode Enabled\");\r\n+\r\n+    // Disable component selection and update button text and color\r\n+    disableComponentSelection();\r\n+    document.getElementById('delete').textContent = 'Deleting...';  // Update text to indicate active mode\r\n+    document.getElementById('delete').style.backgroundColor = 'red';  // Change button color to red\r\n+    document.getElementById('build-connection').style.backgroundColor = '#007BFF';  // Reset build connection button color\r\n+    document.getElementById('build-connection').textContent = 'Build Connection'; // Reset build button text\r\n+\r\n+    // Attach click event listeners to components when in delete mode\r\n+    document.querySelectorAll('.graph-component').forEach(component => {\r\n+        component.addEventListener('click', handleComponentClickForDeletion);\r\n+    });\r\n+});\r\n+\r\n+// Disable the component selection panel during connection/deletion mode\r\n+function disableComponentSelection() {\r\n+    const components = document.querySelectorAll('.component');\r\n+    components.forEach(comp => {\r\n+        comp.style.pointerEvents = 'none';\r\n+    });\r\n+    console.log(\"Component selection disabled.\");\r\n+}\r\n+\r\n+// Re-enable component selection after the operation is done\r\n+function enableComponentSelection() {\r\n+    const components = document.querySelectorAll('.component');\r\n+    components.forEach(comp => {\r\n+        comp.style.pointerEvents = 'auto';\r\n+    });\r\n+    console.log(\"Component selection enabled.\");\r\n+}\r\n+\r\n+// Handle click events on graph components for connection mode\r\n+function handleComponentClickForConnection(event) {\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+    console.log(\"Component clicked for connection:\", clickedComponent?.getAttribute('data-tooltip'));\r\n+\r\n+    if (connectionMode) {\r\n+        handleConnection(clickedComponent);\r\n+    }\r\n+}\r\n+\r\n+// Handle click events on graph components for deletion mode\r\n+function handleComponentClickForDeletion(event) {\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+    console.log(\"Component clicked for deletion:\", clickedComponent?.getAttribute('data-tooltip'));\r\n+\r\n+    if (deleteMode) {\r\n+        handleDeletion(clickedComponent);\r\n+    }\r\n+}\r\n+\r\n+// Handle connection process between components\r\n+function handleConnection(clickedComponent) {\r\n+    console.log(\"Handling connection...\");\r\n+\r\n+    if (!startComponent) {\r\n+        startComponent = clickedComponent;\r\n+        startComponent.classList.add('selected');\r\n+        console.log(\"Start Component Selected:\", startComponent.getAttribute('data-tooltip'));\r\n+    } else if (clickedComponent !== startComponent) {\r\n+        endComponent = clickedComponent;\r\n+        console.log(\"End Component Selected:\", endComponent.getAttribute('data-tooltip'));\r\n+\r\n+        // Prevent duplicate connections\r\n+        const connectionExists = connections.some(conn => \r\n+            (conn.start === startComponent && conn.end === endComponent) ||\r\n+            (conn.start === endComponent && conn.end === startComponent)\r\n+        );\r\n+\r\n+        if (!connectionExists) {\r\n+            console.log(\"Creating new arrow connection.\");\r\n+            createArrowBetweenComponents(startComponent, endComponent);\r\n+            connections.push({ start: startComponent, end: endComponent });\r\n+        } else {\r\n+            console.log(\"Connection already exists.\");\r\n+        }\r\n+\r\n+        cleanupAfterConnection();\r\n+    } else {\r\n+        console.log(\"Clicked on the same component, nothing happens.\");\r\n+    }\r\n+}\r\n+\r\n+// Handle component deletion and associated arrows\r\n+function handleDeletion(clickedComponent) {\r\n+    console.log(\"Deleting component:\", clickedComponent.getAttribute('data-tooltip'));\r\n+    deleteComponentAndConnections(clickedComponent);\r\n+    cleanupAfterDelete();\r\n+}\r\n+\r\n+// Function to create the arrow between components at their edges\r\n+function createArrowBetweenComponents(startComponent, endComponent) {\r\n+    console.log(`Creating an arrow between: ${startComponent.getAttribute('data-tooltip')} and ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+    const startPos = getComponentEdgePosition(startComponent, endComponent);\r\n+    const endPos = getComponentEdgePosition(endComponent, startComponent);\r\n+\r\n+    console.log(`Start Component Position: (${startPos.x}, ${startPos.y})`);\r\n+    console.log(`End Component Position: (${endPos.x}, ${endPos.y})`);\r\n+\r\n+    const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+    const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+    console.log(`Drawing arrow from (${relativeStart.x}, ${relativeStart.y}) to (${relativeEnd.x}, ${relativeEnd.y})`);\r\n+\r\n+    const line = drawArrow(relativeStart, relativeEnd);\r\n+\r\n+    connections.push({ start: startComponent, end: endComponent, line });\r\n+\r\n+    makeArrowFollowComponents(startComponent, endComponent, line);\r\n+}\r\n+\r\n+// Function to calculate component edge positions\r\n+function getComponentEdgePosition(component, targetComponent) {\r\n+    const rect = component.getBoundingClientRect();\r\n+    const targetRect = targetComponent.getBoundingClientRect();\r\n+\r\n+    const componentCenter = {\r\n+        x: rect.left + rect.width / 2,\r\n+        y: rect.top + rect.height / 2\r\n+    };\r\n+\r\n+    const targetCenter = {\r\n+        x: targetRect.left + targetRect.width / 2,\r\n+        y: targetRect.top + targetRect.height / 2\r\n+    };\r\n+\r\n+    const angle = Math.atan2(targetCenter.y - componentCenter.y, targetCenter.x - componentCenter.x);\r\n+    const radius = rect.width / 2;\r\n+\r\n+    const edgeX = componentCenter.x + radius * Math.cos(angle);\r\n+    const edgeY = componentCenter.y + radius * Math.sin(angle);\r\n+\r\n+    console.log(`Component Edge Position: (${edgeX}, ${edgeY})`);\r\n+\r\n+    return { x: edgeX, y: edgeY };\r\n+}\r\n+\r\n+// Function to draw an arrow\r\n+function drawArrow(start, end) {\r\n+    const svg = d3.select(graphWindow).select('svg');\r\n+    if (svg.empty()) {\r\n+        console.log(\"Creating new SVG container with arrowhead marker\");\r\n+        d3.select(graphWindow).append('svg')\r\n+            .attr('width', '100%')\r\n+            .attr('height', '100%')\r\n+            .style('position', 'absolute')\r\n+            .style('top', 0)\r\n+            .style('left', 0)\r\n+            .append('defs')\r\n+            .append('marker')\r\n+            .attr('id', 'arrowhead')\r\n+            .attr('viewBox', '0 0 10 10')\r\n+            .attr('refX', 7)\r\n+            .attr('refY', 5)\r\n+            .attr('markerWidth', 6)\r\n+            .attr('markerHeight', 6)\r\n+            .attr('orient', 'auto')\r\n+            .append('path')\r\n+            .attr('d', 'M 0 0 L 10 5 L 0 10 Z')\r\n+            .attr('fill', 'black');\r\n+    }\r\n+\r\n+    const svgContainer = d3.select(graphWindow).select('svg');\r\n+\r\n+    console.log(\"Drawing arrow on SVG.\");\r\n+\r\n+    return svgContainer.append('line')\r\n+        .attr('x1', start.x)\r\n+        .attr('y1', start.y)\r\n+        .attr('x2', end.x)\r\n+        .attr('y2', end.y)\r\n+        .attr('stroke', 'black')\r\n+        .attr('stroke-width', 2)\r\n+        .attr('marker-end', 'url(#arrowhead)');\r\n+}\r\n+\r\n+// Function to make the arrow follow the components while dragging\r\n+function makeArrowFollowComponents(startComponent, endComponent, line) {\r\n+    const updateLinePosition = () => {\r\n+        const startPos = getComponentEdgePosition(startComponent, endComponent);\r\n+        const endPos = getComponentEdgePosition(endComponent, startComponent);\r\n+\r\n+        const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+        const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+        line\r\n+            .attr('x1', relativeStart.x)\r\n+            .attr('y1', relativeStart.y)\r\n+            .attr('x2', relativeEnd.x)\r\n+            .attr('y2', relativeEnd.y);\r\n+\r\n+        console.log(\"Arrow position updated to follow components.\");\r\n+    };\r\n+\r\n+    startComponent.addEventListener('mousemove', updateLinePosition);\r\n+    endComponent.addEventListener('mousemove', updateLinePosition);\r\n+}\r\n+\r\n+// Function to delete a component and its connections\r\n+function deleteComponentAndConnections(component) {\r\n+    console.log(`Deleting component: ${component.getAttribute('data-tooltip')}`);\r\n+\r\n+    connections = connections.filter(conn => {\r\n+        if (conn.start === component || conn.end === component) {\r\n+            conn.line.remove();\r\n+            return false;\r\n+        }\r\n+        return true;\r\n+    });\r\n+\r\n+    component.remove();\r\n+    console.log(\"Deleted component and its connections.\");\r\n+}\r\n+\r\n+// Cleanup after connection creation\r\n+function cleanupAfterConnection() {\r\n+    connectionMode = false;\r\n+    startComponent.classList.remove('selected');\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+    document.getElementById('build-connection').textContent = 'Build Connection';\r\n+    document.getElementById('build-connection').style.backgroundColor = '#007BFF';\r\n+    enableComponentSelection();\r\n+\r\n+    console.log(\"Connection creation cleaned up.\");\r\n+}\r\n+\r\n+// Cleanup after deletion is done\r\n+function cleanupAfterDelete() {\r\n+    deleteMode = false;\r\n+    document.getElementById('delete').style.backgroundColor = '#007BFF';\r\n+    document.getElementById('delete').textContent = 'Delete';\r\n+    enableComponentSelection();\r\n+    console.log(\"Delete mode cleaned up.\");\r\n+}*/\r\n+\r\n+\r\n+let buildMode = false;\r\n+let deleteMode = false;\r\n+let startComponent = null;\r\n+let endComponent = null;\r\n+let connections = [];\r\n+\r\n+// Function to handle build connection button click\r\n+document.getElementById('build-connection').addEventListener('click', function () {\r\n+    buildMode = true;\r\n+    deleteMode = false;\r\n+    disableComponentSelection(); // Disable adding new components while building connections\r\n+    document.getElementById('build-connection').textContent = 'Building...';\r\n+    document.getElementById('build-connection').style.backgroundColor = 'red'; // Change button color during operation\r\n+    console.log('Build Connection Mode Enabled');\r\n+});\r\n+\r\n+// Function to handle delete button click\r\n+document.getElementById('delete').addEventListener('click', function () {\r\n+    deleteMode = true;\r\n+    buildMode = false;\r\n+    disableComponentSelection(); // Disable adding new components while deleting\r\n+    document.getElementById('delete').textContent = 'Deleting...';\r\n+    document.getElementById('delete').style.backgroundColor = 'red'; // Change button color during operation\r\n+    console.log('Delete Mode Enabled');\r\n+});\r\n+\r\n+// Function to disable component selection while in build or delete mode\r\n+function disableComponentSelection() {\r\n+    document.querySelectorAll('.component').forEach(component => {\r\n+        component.style.pointerEvents = 'none';\r\n+    });\r\n+    console.log('Component selection disabled.');\r\n+}\r\n+\r\n+// Function to enable component selection after build or delete mode\r\n+function enableComponentSelection() {\r\n+    document.querySelectorAll('.component').forEach(component => {\r\n+        component.style.pointerEvents = 'auto';\r\n+    });\r\n+    console.log('Component selection enabled.');\r\n+}\r\n+\r\n+// Handle click events for building connections and deletion\r\n+document.getElementById('graph-window').addEventListener('click', function (event) {\r\n+    if (buildMode) {\r\n+        handleComponentClickForConnection(event);\r\n+    } else if (deleteMode) {\r\n+        handleComponentClickForDeletion(event);\r\n+    }\r\n+});\r\n+\r\n+// Handle click events on graph components for building connections\r\n+function handleComponentClickForConnection(event) {\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+    if (!clickedComponent) {\r\n+        console.log(\"Clicked outside, cancelling connection.\");\r\n+        cleanupAfterConnection();\r\n+        return;\r\n+    }\r\n+\r\n+    if (!startComponent) {\r\n+        // First click selects the start component\r\n+        startComponent = clickedComponent;\r\n+        startComponent.classList.add('selected');\r\n+        console.log(\"First component selected:\", startComponent.getAttribute('data-tooltip'));\r\n+    } else {\r\n+        // Second click selects the end component\r\n+        endComponent = clickedComponent;\r\n+        if (startComponent === endComponent) {\r\n+            console.log(\"Cannot connect a component to itself. Cancelling.\");\r\n+            cleanupAfterConnection();\r\n+            return;\r\n+        }\r\n+        console.log(\"Second component selected:\", endComponent.getAttribute('data-tooltip'));\r\n+\r\n+        // Check if the connection already exists in the specified direction\r\n+        const connectionExists = connections.some(conn => {\r\n+            return (conn.start === startComponent && conn.end === endComponent);\r\n+        });\r\n+\r\n+        if (!connectionExists) {\r\n+            createArrowBetweenComponents(startComponent, endComponent);\r\n+            connections.push({ start: startComponent, end: endComponent });\r\n+            console.log(\"Connection created.\");\r\n+        } else {\r\n+            console.log(\"Connection already exists in this direction. No new arrow drawn.\");\r\n+        }\r\n+        cleanupAfterConnection();\r\n+    }\r\n+}\r\n+\r\n+// Handle click events on graph components for deletion mode\r\n+function handleComponentClickForDeletion(event) {\r\n+    const clickedComponent = event.target.closest('.graph-component');\r\n+    console.log(\"Component clicked for deletion:\", clickedComponent?.getAttribute('data-tooltip'));\r\n+\r\n+    if (deleteMode && clickedComponent) {\r\n+        handleDeletion(clickedComponent);\r\n+    }\r\n+}\r\n+\r\n+// Handle component deletion and associated arrows\r\n+function handleDeletion(clickedComponent) {\r\n+    console.log(\"Deleting component:\", clickedComponent.getAttribute('data-tooltip'));\r\n+\r\n+    // Remove all connections associated with the component\r\n+    deleteComponentAndConnections(clickedComponent);\r\n+\r\n+    // After deletion, clean up the delete mode\r\n+    cleanupAfterDelete();\r\n+}\r\n+\r\n+// Function to delete a component and its connections\r\n+function deleteComponentAndConnections(component) {\r\n+    // Filter out and remove all connections associated with the component\r\n+    connections = connections.filter(conn => {\r\n+        if (conn.start === component || conn.end === component) {\r\n+            console.log(`Deleting connection between ${conn.start?.getAttribute('data-tooltip')} and ${conn.end?.getAttribute('data-tooltip')}`);\r\n+            \r\n+            // Check if the connection's line exists before trying to remove it\r\n+            if (conn.line) {\r\n+                conn.line.remove();  // Remove the SVG line (arrow)\r\n+            }\r\n+            \r\n+            return false;  // Remove this connection from the list\r\n+        }\r\n+        return true;  // Keep the connection if not associated with the component\r\n+    });\r\n+\r\n+    // Check if the component exists before trying to remove it\r\n+    if (component) {\r\n+        component.remove();\r\n+        console.log(`Component ${component.getAttribute('data-tooltip')} deleted.`);\r\n+    }\r\n+}\r\n+\r\n+\r\n+// Cleanup after connection is created or cancelled\r\n+function cleanupAfterConnection() {\r\n+    buildMode = false;\r\n+    startComponent?.classList.remove('selected');\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+\r\n+    // Reset the button text and color\r\n+    document.getElementById('build-connection').textContent = 'Build Connection';\r\n+    document.getElementById('build-connection').style.backgroundColor = '#28a745';\r\n+    enableComponentSelection();\r\n+    console.log(\"Connection mode cleaned up.\");\r\n+}\r\n+\r\n+// Cleanup after deletion is done\r\n+function cleanupAfterDelete() {\r\n+    deleteMode = false;\r\n+    startComponent = null;\r\n+    endComponent = null;\r\n+\r\n+    // Reset the button text and color\r\n+    document.getElementById('delete').textContent = 'Delete Component';\r\n+    document.getElementById('delete').style.backgroundColor = '#28a745';\r\n+    \r\n+    enableComponentSelection();\r\n+    console.log(\"Delete mode cleaned up.\");\r\n+}\r\n+\r\n+// Function to create an arrow between two components\r\n+function createArrowBetweenComponents(startComponent, endComponent) {\r\n+    console.log(`Creating an arrow between: ${startComponent.getAttribute('data-tooltip')} and ${endComponent.getAttribute('data-tooltip')}`);\r\n+\r\n+    const startPos = getComponentCircumferencePosition(startComponent, endComponent);\r\n+    const endPos = getComponentCircumferencePosition(endComponent, startComponent);\r\n+\r\n+    const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+    const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+    const line = drawArrow(relativeStart, relativeEnd);\r\n+\r\n+    // Store the arrow for future reference and updating\r\n+    connections.push({ start: startComponent, end: endComponent, line });\r\n+\r\n+    // Add drag event listeners to keep the arrow attached when components are dragged\r\n+    makeArrowFollowComponents(startComponent, endComponent, line);\r\n+}\r\n+\r\n+// Function to draw an arrow between two components\r\n+function drawArrow(start, end) {\r\n+    const svg = d3.select(graphWindow).select('svg');\r\n+    if (svg.empty()) {\r\n+        d3.select(graphWindow).append('svg')\r\n+            .attr('width', '100%')\r\n+            .attr('height', '100%')\r\n+            .style('position', 'absolute')\r\n+            .style('top', 0)\r\n+            .style('left', 0)\r\n+            .append('defs')\r\n+            .append('marker')\r\n+            .attr('id', 'arrowhead')\r\n+            .attr('viewBox', '0 0 10 10')\r\n+            .attr('refX', 7)\r\n+            .attr('refY', 5)\r\n+            .attr('markerWidth', 6)\r\n+            .attr('markerHeight', 6)\r\n+            .attr('orient', 'auto')\r\n+            .append('path')\r\n+            .attr('d', 'M 0 0 L 10 5 L 0 10 Z')\r\n+            .attr('fill', 'black');\r\n+    }\r\n+\r\n+    const svgContainer = d3.select(graphWindow).select('svg');\r\n+\r\n+    return svgContainer.append('line')\r\n+        .attr('x1', start.x)\r\n+        .attr('y1', start.y)\r\n+        .attr('x2', end.x)\r\n+        .attr('y2', end.y)\r\n+        .attr('stroke', 'black')\r\n+        .attr('stroke-width', 2)\r\n+        .attr('marker-end', 'url(#arrowhead)');\r\n+}\r\n+\r\n+// Function to calculate the circumference position based on angle\r\n+function getComponentCircumferencePosition(component, targetComponent) {\r\n+    const rect = component.getBoundingClientRect();\r\n+    const targetRect = targetComponent.getBoundingClientRect();\r\n+    const dx = targetRect.left - rect.left;\r\n+    const dy = targetRect.top - rect.top;\r\n+    const angle = Math.atan2(dy, dx);\r\n+    const radius = rect.width / 2; // Assuming the component is circular\r\n+\r\n+    return {\r\n+        x: rect.left + radius + radius * Math.cos(angle),\r\n+        y: rect.top + radius + radius * Math.sin(angle)\r\n+    };\r\n+}\r\n+\r\n+// Function to make the arrow follow the components while dragging\r\n+function makeArrowFollowComponents(startComponent, endComponent, line) {\r\n+    const updateLinePosition = () => {\r\n+        const startPos = getComponentCircumferencePosition(startComponent, endComponent);\r\n+        const endPos = getComponentCircumferencePosition(endComponent, startComponent);\r\n+\r\n+        const relativeStart = { x: startPos.x - graphWindow.getBoundingClientRect().left, y: startPos.y - graphWindow.getBoundingClientRect().top };\r\n+        const relativeEnd = { x: endPos.x - graphWindow.getBoundingClientRect().left, y: endPos.y - graphWindow.getBoundingClientRect().top };\r\n+\r\n+        line\r\n+            .attr('x1', relativeStart.x)\r\n+            .attr('y1', relativeStart.y)\r\n+            .attr('x2', relativeEnd.x)\r\n+            .attr('y2', relativeEnd.y);\r\n+    };\r\n+\r\n+    startComponent.addEventListener('mousemove', updateLinePosition);\r\n+    endComponent.addEventListener('mousemove', updateLinePosition);\r\n+}\r"
                },
                {
                    "filename": "static/css/styles.css",
                    "status": "added",
                    "additions": 376,
                    "deletions": 0,
                    "changes": 376,
                    "patch": "@@ -0,0 +1,376 @@\n+/* General reset and base styling */\r\n+* {\r\n+    margin: 0;\r\n+    padding: 0;\r\n+    box-sizing: border-box;\r\n+    font-family: 'Poppins', sans-serif;\r\n+}\r\n+\r\n+body, html {\r\n+    height: 100%;\r\n+}\r\n+\r\n+.container {\r\n+    display: flex;\r\n+    flex-direction: row;\r\n+    height: 100vh;\r\n+    width: 100vw;\r\n+    position: relative;\r\n+}\r\n+\r\n+.graph-input-container {\r\n+    display: grid;\r\n+    grid-template-rows: 5fr 1fr;\r\n+    flex: 1;\r\n+}\r\n+\r\n+/* Styling for the component selection panel */\r\n+.component-panel {\r\n+    width: 100%;\r\n+    max-width: 300px;\r\n+    background-color: #111010;\r\n+    padding: 15px;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    justify-content: flex-start;\r\n+    align-items: flex-start;\r\n+}\r\n+\r\n+#components {\r\n+    display: grid;\r\n+    grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));\r\n+    gap: 15px;\r\n+    width: 100%;\r\n+}\r\n+\r\n+/* Circular component styling with unique colors */\r\n+#load_balancer {\r\n+    background-color: #007BFF; /* Blue */\r\n+}\r\n+\r\n+#server {\r\n+    background-color: #FF5733; /* Orange */\r\n+}\r\n+\r\n+#client {\r\n+    background-color: #28A745; /* Green */\r\n+}\r\n+\r\n+#cache {\r\n+    background-color: #FFC300; /* Yellow */\r\n+}\r\n+\r\n+#database {\r\n+    background-color: #6C63FF; /* Purple */\r\n+}\r\n+\r\n+#aws {\r\n+    background-color: #FF9900; /* AWS signature orange */\r\n+}\r\n+\r\n+#api_gateway { \r\n+    background-color: #1ABC9C; /* API gateway hue */\r\n+}\r\n+\r\n+#msg_queue {\r\n+    background-color: #17A2B8; /* Teal color for the Message Queue */\r\n+}\r\n+\r\n+#cdn {\r\n+    background-color: #DC143C; /* Teal color for the CDN */\r\n+}\r\n+\r\n+#dns {\r\n+    background-color: #6A5ACD; /* Slate Blue for the DNS*/\r\n+}\r\n+\r\n+#firewall {\r\n+    background-color: #D35400; /* Burnt Orange */\r\n+}\r\n+\r\n+#aths {\r\n+    background-color: #4169E1; /* Royal Blue */\r\n+}\r\n+\r\n+.component {\r\n+    width: 60px;\r\n+    height: 60px;\r\n+    display: flex;\r\n+    justify-content: center;\r\n+    align-items: center;\r\n+    border-radius: 50%;\r\n+    color: white;\r\n+    cursor: pointer;\r\n+    transition: transform 0.3s ease, background-color 0.3s ease;\r\n+    position: relative;\r\n+}\r\n+\r\n+.component i {\r\n+    font-size: 24px;\r\n+}\r\n+\r\n+.component:hover {\r\n+    transform: scale(1.1);\r\n+    z-index: 10;\r\n+}\r\n+\r\n+/* Add tooltip on hover for components in the left panel */\r\n+.component:hover::after {\r\n+    content: attr(data-tooltip); /* Use the data-tooltip attribute to show the name */\r\n+    position: absolute;\r\n+    bottom: -30px;\r\n+    left: 30px;\r\n+    /* transform: translateX(-50%); */\r\n+    background-color: rgba(0, 0, 0, 0.7);\r\n+    color: white;\r\n+    padding: 5px 10px;\r\n+    border-radius: 5px;\r\n+    font-size: 12px;\r\n+    white-space: nowrap;\r\n+    z-index: 2; /* Ensure the tooltip appears above other components */\r\n+}\r\n+\r\n+/* #components {\r\n+    position: relative;\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 15px;\r\n+} */\r\n+\r\n+#right-column {\r\n+    position: absolute;\r\n+    top: 7.5%;\r\n+    left: 12%;  /* Adjust this value to control how far to the right the second column appears */\r\n+    display: flex;\r\n+    flex-direction: column;\r\n+    gap: 15px;  /* Space between components in the right column */\r\n+}\r\n+\r\n+/* Main window where the graph will be displayed */\r\n+.main-window {\r\n+    width: 99%; /* Adjusted to complement the increased component panel width */\r\n+    height: 100%;\r\n+    background-color: #ffffff;\r\n+    border-left: 2px solid #ccc;\r\n+    position: relative;\r\n+    display: flex;\r\n+    justify-content: center;\r\n+    align-items: center;\r\n+}\r\n+\r\n+/* Input bar styling */\r\n+.input-bar {\r\n+    width: 100%;\r\n+    padding: 15px;\r\n+    background-color: #333;\r\n+    display: flex;\r\n+    justify-content: center;\r\n+    align-items: center;\r\n+    gap: 10px;\r\n+}\r\n+\r\n+.input-buttons {\r\n+    display: flex;\r\n+    flex-direction: column; /* Stack items vertically */\r\n+    align-items: center;\r\n+    gap: 10px;  /* Space between the vertical stack */\r\n+}\r\n+\r\n+#mic-stop-wrapper {\r\n+    display: flex;\r\n+    justify-content: space-between;\r\n+    gap: 10px;  /* Space between mic and stop buttons */\r\n+    width: 100%;\r\n+}\r\n+\r\n+#mic-button, #stop-button {\r\n+    display: inline-block;\r\n+    flex: 1;  /* Equal width for mic and stop buttons */\r\n+}\r\n+\r\n+#send-button {\r\n+    margin-top: 20px; /* Space between the mic-stop section and send button */\r\n+    width: 100%; /* Full width for the send button */\r\n+}\r\n+\r\n+\r\n+.input-bar textarea {\r\n+    width: 60%;\r\n+    height: 100px;\r\n+    padding: 10px;\r\n+    border: none;\r\n+    border-radius: 5px;\r\n+    font-size: 16px;\r\n+    resize: none;\r\n+    flex: 1;\r\n+}\r\n+\r\n+.input-bar button {\r\n+    padding: 10px 20px;\r\n+    background-color: #28a745;\r\n+    border: none;\r\n+    border-radius: 5px;\r\n+    color: white;\r\n+    font-size: 16px;\r\n+    cursor: pointer;\r\n+    transition: background-color 0.3s ease;\r\n+}\r\n+\r\n+.input-bar button:hover {\r\n+    background-color: #218838;\r\n+}\r\n+\r\n+#send-button {\r\n+    padding: 10px 20px;\r\n+    background-color: #28a745;\r\n+    border: none;\r\n+    border-radius: 5px;\r\n+    color: white;\r\n+    font-size: 16px;\r\n+    cursor: pointer;\r\n+    transition: background-color 0.3s ease;\r\n+    display: block;\r\n+    margin-top: 10px; /* Space between the two buttons */\r\n+}\r\n+\r\n+#send-button i {\r\n+    margin-right: 5px;  /* Space between the arrow icon and text */\r\n+}\r\n+\r\n+#send-button:hover {\r\n+    background-color: #218838;  /* Change button color on hover */\r\n+}\r\n+\r\n+\r\n+/* Styling for the \"Select Components\" text */\r\n+.component-panel h3 {\r\n+    text-align: center;\r\n+    font-family: 'Poppins', sans-serif;\r\n+    font-weight: 600;\r\n+    font-size: 20px;\r\n+    margin-bottom: 20px;\r\n+    color: #f2eeee;\r\n+    text-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2);\r\n+    max-width: 100%;\r\n+    word-wrap: break-word;\r\n+    align-self: center;\r\n+}\r\n+\r\n+/* Styling for components placed in the main window */\r\n+.graph-component {\r\n+    width: 60px;\r\n+    height: 60px;\r\n+    background-color: #007BFF;  /* Dynamically overridden by the component's color */\r\n+    border-radius: 50%;\r\n+    color: white;\r\n+    display: flex;\r\n+    flex-direction: column;  /* Stack icon and name vertically */\r\n+    justify-content: center;\r\n+    align-items: center;\r\n+    cursor: pointer;\r\n+    transition: transform 0.3s ease;\r\n+    text-align: center;\r\n+    position: relative;\r\n+}\r\n+\r\n+.graph-component i {\r\n+    font-size: 24px;\r\n+}\r\n+\r\n+/* Styling the label (component name) */\r\n+.graph-component span {\r\n+    font-size: 14px;\r\n+    font-weight: bold;  /* Bold font */\r\n+    color: black;  /* Black color for text */\r\n+    position: absolute;  /* Position text outside the circle */\r\n+    top: 70px;  /* Slightly below the component */\r\n+    left: 50%;\r\n+    transform: translateX(-50%);  /* Center horizontally */\r\n+}\r\n+\r\n+.graph-component:hover {\r\n+    transform: scale(1.1);\r\n+}\r\n+\r\n+/* Custom context menu styling */\r\n+.context-menu {\r\n+    position: absolute;\r\n+    background-color: #ffffff; /* White background for visibility */\r\n+    border: 1px solid #ccc;\r\n+    box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.1);\r\n+    padding: 10px;\r\n+    z-index: 1000;  /* Ensure it appears above other elements */\r\n+    display: block;\r\n+}\r\n+\r\n+.context-menu-item {\r\n+    padding: 5px 10px;\r\n+    cursor: pointer;\r\n+    font-size: 14px;\r\n+    color: #333;\r\n+}\r\n+\r\n+.context-menu-item:hover {\r\n+    background-color: #f0f0f0;\r\n+    color: #000;\r\n+}\r\n+\r\n+svg {\r\n+    position: absolute;\r\n+    top: 0;\r\n+    left: 0;\r\n+    width: 100%;\r\n+    height: 100%;\r\n+    pointer-events: none;  /* Ensure the SVG doesn't interfere with clicks */\r\n+}\r\n+\r\n+.vibrate {\r\n+    animation: vibrate 0.2s infinite;\r\n+}\r\n+\r\n+@keyframes vibrate {\r\n+    0% { transform: translate(0); }\r\n+    25% { transform: translate(1px, 1px); }\r\n+    50% { transform: translate(-1px, -1px); }\r\n+    75% { transform: translate(1px, -1px); }\r\n+    100% { transform: translate(-1px, 1px); }\r\n+}\r\n+\r\n+/* Styling for the Stop button */\r\n+#stop-button {\r\n+    background-color: red;\r\n+    color: white;\r\n+    border: none;\r\n+    padding: 10px 20px;\r\n+    font-size: 16px;\r\n+    cursor: pointer;\r\n+    border-radius: 5px;\r\n+    margin-left: 1px;\r\n+    transition: background-color 0.3s ease;\r\n+    margin-right: 1px;\r\n+}\r\n+\r\n+#stop-button:hover {\r\n+    background-color: darkred; /* Slightly darker shade on hover */\r\n+}\r\n+.button {\r\n+    background-color: #28a745; \r\n+    color: white; \r\n+    border: none; \r\n+    padding: 10px 20px; \r\n+    font-size: 16px; \r\n+    cursor: pointer; \r\n+    border-radius: 5px; \r\n+    text-align: center; \r\n+    font-family: 'Poppins', sans-serif;\r\n+    font-weight: 600;\r\n+    z-index: 1;\r\n+}\r\n+\r\n+.buttons {\r\n+    display: grid;\r\n+    width: 100%;\r\n+    gap: 20px;\r\n+    margin-top: 80px;\r\n+}\r\n+\r"
                },
                {
                    "filename": "static/favicon.ico",
                    "status": "added",
                    "additions": 0,
                    "deletions": 0,
                    "changes": 0,
                    "patch": null
                },
                {
                    "filename": "static/scripts/api.js",
                    "status": "added",
                    "additions": 129,
                    "deletions": 0,
                    "changes": 129,
                    "patch": "@@ -0,0 +1,129 @@\n+// URL of the Flask endpoint (adjust host and port as needed)\r\n+const apiUrl = 'http://127.0.0.1:5000/generate';\r\n+\r\n+// DOM elements\r\n+const sendButton = document.getElementById('send-button');\r\n+const textArea = document.getElementById('user-input');\r\n+const componentsMap = new Map(Array.from(document.querySelectorAll('.component')).map(component => [component.getAttribute('data-tooltip'), component]));\r\n+\r\n+// Function to send input to Flask and receive graph JSON\r\n+async function fetchGraphJson(userInput) {\r\n+    try {\r\n+        const response = await fetch(apiUrl, {\r\n+            method: 'POST',\r\n+            headers: {\r\n+                'Content-Type': 'application/json',\r\n+            },\r\n+            body: JSON.stringify({ userInput })\r\n+        });\r\n+\r\n+        if (!response.ok) {\r\n+            throw new Error(`Server error: ${response.statusText}`);\r\n+        }\r\n+\r\n+        const graph = await response.json();\r\n+        console.log(\"Received graph JSON:\", graph);\r\n+        return graph;\r\n+\r\n+    } catch (error) {\r\n+        console.error(\"Error fetching graph JSON:\", error);\r\n+    }\r\n+}\r\n+\r\n+// Event listener for Send button click\r\n+sendButton.addEventListener('click', async () => {\r\n+    const userInput = textArea.value.trim();\r\n+\r\n+    // Validate input\r\n+    if (!userInput) {\r\n+        console.log(\"User input is empty. Please provide valid input.\");\r\n+        return;\r\n+    }\r\n+\r\n+    console.log(\"Sending user input to Flask:\", userInput);\r\n+\r\n+    // Fetch graph data from Flask\r\n+    const graph = await fetchGraphJson(userInput);\r\n+\r\n+    // If graph is received, process it\r\n+    if (graph) {\r\n+        processGraph(graph);\r\n+    }\r\n+});\r\n+\r\n+// Function to process the received graph data and create components and connections\r\n+function processGraph(graph) {\r\n+    // Validate if graph is an array\r\n+    if (!Array.isArray(graph)) {\r\n+        console.error(\"Invalid graph format received. Expected an array.\");\r\n+        return;\r\n+    }\r\n+\r\n+    // Clear previous graph data if needed\r\n+    clearPreviousGraph();\r\n+\r\n+    const nodeCategories = new Map();\r\n+\r\n+    // Helper function to track nodes by their component type\r\n+    const addNode = ({ id, component }) => {\r\n+        const nodeList = nodeCategories.get(component) || [];\r\n+        const nodeAlreadyExists = !!nodeList.find(node => node.component === component && node.id === id);\r\n+        if (!nodeAlreadyExists) nodeList.push({ id, component });\r\n+        nodeCategories.set(component, nodeList);\r\n+    };\r\n+\r\n+    // Traverse graph to fill nodeCategories\r\n+    graph.forEach(node => {\r\n+        addNode(node);\r\n+        node.adjacencyList.forEach(addNode);\r\n+    });\r\n+\r\n+    // Map to keep track of created nodes in the DOM\r\n+    const nodes = new Map();\r\n+\r\n+    // Function to create a node name based on its type and ID\r\n+    const getNodeName = ({ id, component }) => {\r\n+        const category = nodeCategories.get(component);\r\n+        const nodeCount = category ? category.length : 0;\r\n+        return nodeCount > 1 ? `${component} ${id}` : component;\r\n+    };\r\n+\r\n+    // Function to create a component node in the DOM\r\n+    const createNode = ({ id, component }) => {\r\n+        const nodeKey = `${component}_${id}`;\r\n+        const node = nodes.get(nodeKey);\r\n+        if (!node) {\r\n+            const componentElement = componentsMap.get(titleCase(component));\r\n+            if (componentElement) {\r\n+                const nodeName = getNodeName({ id, component });\r\n+                createComponent(componentElement, nodeName);\r\n+            }\r\n+            nodes.set(nodeKey, { id, component });\r\n+        }\r\n+    };\r\n+\r\n+    // Create all nodes\r\n+    graph.forEach(node => {\r\n+        createNode(node);\r\n+        node.adjacencyList.forEach(createNode);\r\n+    });\r\n+\r\n+    // Create connections between nodes based on adjacency list\r\n+    graph.forEach(node => {\r\n+        const sourceNode = document.querySelector(`#graph-window div[name='${getNodeName(node)}']`);\r\n+        node.adjacencyList.forEach(adjacentNode => {\r\n+            const destinationNode = document.querySelector(`#graph-window div[name='${getNodeName(adjacentNode)}']`);\r\n+            if (sourceNode && destinationNode) createArrowBetweenComponents(sourceNode, destinationNode);\r\n+        });\r\n+    });\r\n+}\r\n+\r\n+// Helper function to clear previous graph components and connections\r\n+function clearPreviousGraph() {\r\n+    document.querySelectorAll('.graph-component').forEach(node => node.remove());\r\n+    d3.select('#graph-window svg').remove(); // Remove SVG arrows\r\n+}\r\n+\r\n+// Helper function to convert string to title case\r\n+const titleCase = (string) =>\r\n+    string.split(' ').map(word => word[0].toUpperCase() + word.slice(1)).join(' ').trim();\r"
                },
                {
                    "filename": "static/scripts/graph.js",
                    "status": "added",
                    "additions": 496,
                    "deletions": 0,
                    "changes": 496,
                    "patch": "@@ -0,0 +1,496 @@\n+/*// Select the main window where components will be placed\r\n+const graphWindow = document.getElementById('graph-window');\r\n+\r\n+// Add event listeners to each component in the component panel\r\n+const components = document.querySelectorAll('.component');\r\n+\r\n+components.forEach(component => {\r\n+    component.addEventListener('click', function() {\r\n+        // Get the component's ID, tooltip (name), and background color\r\n+        const componentId = this.id;\r\n+        const componentName = this.getAttribute('data-tooltip');\r\n+        const componentColor = window.getComputedStyle(this).backgroundColor;\r\n+\r\n+        // Create a new component in the main window\r\n+        createComponentInGraphWindow(componentId, componentName, componentColor);\r\n+    });\r\n+});\r\n+\r\n+function createComponentInGraphWindow(componentId, componentName, componentColor) {\r\n+    // Create a div for the component\r\n+    const newComponent = document.createElement('div');\r\n+    newComponent.classList.add('graph-component');  // Add a class for styling\r\n+    newComponent.setAttribute('data-tooltip', componentName);  // For displaying tooltip\r\n+    newComponent.style.backgroundColor = componentColor;  // Set the color to match the left panel\r\n+\r\n+    // Set the content (icon) for the new component\r\n+    switch (componentId) {\r\n+        case 'load_balancer':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-network-wired\"></i>';\r\n+            break;\r\n+        case 'server':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-server\"></i>';\r\n+            break;\r\n+        case 'client':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-user\"></i>';\r\n+            break;\r\n+        case 'cache':\r\n+            newComponent.innerHTML = '<i class=\"fa-solid fa-memory\"></i>';\r\n+            break;\r\n+        case 'database':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-database\"></i>';\r\n+            break;\r\n+        case 'aws':\r\n+            newComponent.innerHTML = '<i class=\"fab fa-aws\"></i>';\r\n+            break;\r\n+        default:\r\n+            return;  // Exit if the component ID is unrecognized\r\n+    }\r\n+\r\n+    // Create a label to show the name of the component\r\n+    const label = document.createElement('span');\r\n+    label.innerText = componentName;\r\n+    label.style.position = 'absolute';  // Position label outside the circle\r\n+    label.style.top = '70px';  // Slightly below the component\r\n+    label.style.left = '50%';\r\n+    label.style.transform = 'translateX(-50%)';  // Center it horizontally\r\n+    label.style.fontWeight = 'bold';  // Make text bold\r\n+    label.style.color = 'black';  // Black color for better contrast\r\n+    label.style.fontSize = '14px';  // Slightly larger text\r\n+\r\n+    // Add the label below the component\r\n+    newComponent.appendChild(label);\r\n+\r\n+    // Add draggable functionality\r\n+    newComponent.style.position = 'absolute';  // Absolute positioning\r\n+    const componentSize = 60; // Size of the component\r\n+    newComponent.style.top = getRandomPosition(graphWindow.offsetHeight, componentSize) + 'px';  // Random top position\r\n+    newComponent.style.left = getRandomPosition(graphWindow.offsetWidth, componentSize) + 'px';  // Random left position\r\n+    makeDraggable(newComponent);  // Make the component draggable\r\n+\r\n+    // Append the component to the main window\r\n+    graphWindow.appendChild(newComponent);\r\n+}\r\n+\r\n+// Function to make the component draggable\r\n+function makeDraggable(element) {\r\n+    let offsetX = 0, offsetY = 0, mouseX = 0, mouseY = 0;\r\n+\r\n+    element.onmousedown = dragMouseDown;\r\n+\r\n+    function dragMouseDown(e) {\r\n+        e.preventDefault();\r\n+        mouseX = e.clientX;\r\n+        mouseY = e.clientY;\r\n+        document.onmouseup = closeDragElement;\r\n+        document.onmousemove = elementDrag;\r\n+    }\r\n+\r\n+    function elementDrag(e) {\r\n+        e.preventDefault();\r\n+    \r\n+        // Calculate new positions\r\n+        offsetX = mouseX - e.clientX;\r\n+        offsetY = mouseY - e.clientY;\r\n+        mouseX = e.clientX;\r\n+        mouseY = e.clientY;\r\n+    \r\n+        // Get current component dimensions and position\r\n+        const elementWidth = element.offsetWidth;\r\n+        const elementHeight = element.offsetHeight;\r\n+    \r\n+        // Get the boundaries of the main window\r\n+        const windowWidth = graphWindow.offsetWidth;\r\n+        const windowHeight = graphWindow.offsetHeight;\r\n+        \r\n+        // Get the height of the black input bar (bottom bar)\r\n+        const bottomBarHeight = document.querySelector('.input-bar').offsetHeight;\r\n+    \r\n+        // Calculate new top and left positions, ensuring the component stays inside the main window\r\n+        let newTop = element.offsetTop - offsetY;\r\n+        let newLeft = element.offsetLeft - offsetX;\r\n+    \r\n+        // Boundary checks to prevent dragging outside the main window\r\n+        if (newTop < 0) newTop = 0; // Prevent moving above the top boundary\r\n+        if (newLeft < 0) newLeft = 0; // Prevent moving to the left of the boundary\r\n+        if (newTop + elementHeight > windowHeight - bottomBarHeight) newTop = windowHeight - bottomBarHeight - elementHeight; // Prevent moving below the black line\r\n+        if (newLeft + elementWidth > windowWidth) newLeft = windowWidth - elementWidth; // Prevent moving beyond the right boundary\r\n+    \r\n+        // Apply the new top and left values\r\n+        element.style.top = newTop + \"px\";\r\n+        element.style.left = newLeft + \"px\";\r\n+    }\r\n+        \r\n+\r\n+    function closeDragElement() {\r\n+        document.onmouseup = null;\r\n+        document.onmousemove = null;\r\n+    }\r\n+}\r\n+\r\n+// Function to generate a random position, ensuring it stays within the main window\r\n+function getRandomPosition(max, elementSize) {\r\n+    return Math.floor(Math.random() * (max - elementSize - 20)) + 10;\r\n+}*/\r\n+\r\n+\r\n+/*// Select the main window where components will be placed\r\n+const graphWindow = document.getElementById('graph-window');\r\n+\r\n+// Add event listeners to each component in the component panel\r\n+const components = document.querySelectorAll('.component');\r\n+\r\n+components.forEach(component => {\r\n+    component.addEventListener('click', function() {\r\n+        // Get the component's ID, tooltip (name), and background color\r\n+        const componentId = this.id;\r\n+        const componentName = this.getAttribute('data-tooltip');\r\n+        const componentColor = window.getComputedStyle(this).backgroundColor;\r\n+\r\n+        // Create a new component in the main window\r\n+        createComponentInGraphWindow(componentId, componentName, componentColor);\r\n+    });\r\n+});\r\n+\r\n+function createComponentInGraphWindow(componentId, componentName, componentColor) {\r\n+    // Create a div for the component\r\n+    const newComponent = document.createElement('div');\r\n+    newComponent.classList.add('graph-component');  // Add a class for styling\r\n+    newComponent.setAttribute('data-tooltip', componentName);  // For displaying tooltip\r\n+    newComponent.style.backgroundColor = componentColor;  // Set the color to match the left panel\r\n+\r\n+    // Set the content (icon) for the new component\r\n+    switch (componentId) {\r\n+        case 'load_balancer':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-network-wired\"></i>';\r\n+            break;\r\n+        case 'server':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-server\"></i>';\r\n+            break;\r\n+        case 'client':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-user\"></i>';\r\n+            break;\r\n+        case 'cache':\r\n+            newComponent.innerHTML = '<i class=\"fa-solid fa-memory\"></i>';\r\n+            break;\r\n+        case 'database':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-database\"></i>';\r\n+            break;\r\n+        case 'aws':\r\n+            newComponent.innerHTML = '<i class=\"fab fa-aws\"></i>';\r\n+            break;\r\n+        default:\r\n+            return;  // Exit if the component ID is unrecognized\r\n+    }\r\n+\r\n+    // Create a label to show the name of the component\r\n+    const label = document.createElement('span');\r\n+    label.innerText = componentName;\r\n+    label.style.position = 'absolute';  // Position label outside the circle\r\n+    label.style.top = '70px';  // Slightly below the component\r\n+    label.style.left = '50%';\r\n+    label.style.transform = 'translateX(-50%)';  // Center it horizontally\r\n+    label.style.fontWeight = 'bold';  // Make text bold\r\n+    label.style.color = 'black';  // Black color for better contrast\r\n+    label.style.fontSize = '14px';  // Slightly larger text\r\n+\r\n+    // Add the label below the component\r\n+    newComponent.appendChild(label);\r\n+\r\n+    // Add draggable functionality\r\n+    newComponent.style.position = 'absolute';  // Absolute positioning\r\n+    const componentSize = 60; // Size of the component\r\n+    const labelHeight = 30; // Approximate height of the label\r\n+    const bottomBarHeight = document.querySelector('.input-bar').offsetHeight; // Get the height of the bottom bar\r\n+\r\n+    // Ensure the component and label appear within the correct boundaries (considering the bottom bar and label height)\r\n+    const maxTop = graphWindow.offsetHeight - componentSize - labelHeight - bottomBarHeight;\r\n+    const maxLeft = graphWindow.offsetWidth - componentSize;\r\n+\r\n+    newComponent.style.top = getRandomPosition(maxTop, componentSize) + 'px';  // Random top position with boundaries\r\n+    newComponent.style.left = getRandomPosition(maxLeft, componentSize) + 'px';  // Random left position with boundaries\r\n+\r\n+    makeDraggable(newComponent);  // Make the component draggable\r\n+\r\n+    // Append the component to the main window\r\n+    graphWindow.appendChild(newComponent);\r\n+}\r\n+\r\n+// Function to make the component draggable\r\n+function makeDraggable(element) {\r\n+    let offsetX = 0, offsetY = 0, mouseX = 0, mouseY = 0;\r\n+\r\n+    element.onmousedown = dragMouseDown;\r\n+\r\n+    function dragMouseDown(e) {\r\n+        e.preventDefault();\r\n+        mouseX = e.clientX;\r\n+        mouseY = e.clientY;\r\n+        document.onmouseup = closeDragElement;\r\n+        document.onmousemove = elementDrag;\r\n+    }\r\n+\r\n+    function elementDrag(e) {\r\n+        e.preventDefault();\r\n+    \r\n+        // Calculate new positions\r\n+        offsetX = mouseX - e.clientX;\r\n+        offsetY = mouseY - e.clientY;\r\n+        mouseX = e.clientX;\r\n+        mouseY = e.clientY;\r\n+    \r\n+        // Get current component dimensions and position\r\n+        const elementWidth = element.offsetWidth;\r\n+        const elementHeight = element.offsetHeight;\r\n+        const labelHeight = 30; // Approximate height of the label\r\n+    \r\n+        // Get the boundaries of the main window\r\n+        const windowWidth = graphWindow.offsetWidth;\r\n+        const windowHeight = graphWindow.offsetHeight;\r\n+        \r\n+        // Get the height of the black input bar (bottom bar)\r\n+        const bottomBarHeight = document.querySelector('.input-bar').offsetHeight;\r\n+    \r\n+        // Calculate new top and left positions, ensuring the component stays inside the main window\r\n+        let newTop = element.offsetTop - offsetY;\r\n+        let newLeft = element.offsetLeft - offsetX;\r\n+    \r\n+        // Boundary checks to prevent dragging outside the main window (considering the label)\r\n+        if (newTop < 0) newTop = 0; // Prevent moving above the top boundary\r\n+        if (newLeft < 0) newLeft = 0; // Prevent moving to the left of the boundary\r\n+        if (newTop + elementHeight + labelHeight > windowHeight - bottomBarHeight) newTop = windowHeight - bottomBarHeight - elementHeight - labelHeight; // Prevent moving below the black line\r\n+        if (newLeft + elementWidth > windowWidth) newLeft = windowWidth - elementWidth; // Prevent moving beyond the right boundary\r\n+    \r\n+        // Apply the new top and left values\r\n+        element.style.top = newTop + \"px\";\r\n+        element.style.left = newLeft + \"px\";\r\n+    }\r\n+        \r\n+    function closeDragElement() {\r\n+        document.onmouseup = null;\r\n+        document.onmousemove = null;\r\n+    }\r\n+}\r\n+\r\n+// Function to generate a random position, ensuring it stays within the main window\r\n+function getRandomPosition(max, elementSize) {\r\n+    return Math.floor(Math.random() * (max - elementSize - 20)) + 10;\r\n+}*/\r\n+\r\n+\r\n+// Select the main window where components will be placed\r\n+const graphWindow = document.getElementById('graph-window');\r\n+\r\n+// Add event listeners to each component in the component panel\r\n+const components = document.querySelectorAll('.component');\r\n+\r\n+\r\n+\r\n+components.forEach(component => {\r\n+    component.addEventListener('click', function() {\r\n+        createComponent(this);\r\n+    });\r\n+});\r\n+\r\n+function createComponent(component, name = null) {\r\n+    // Get the component's ID, tooltip (name), and background color\r\n+    const componentId = component.id;\r\n+    const componentName = name || component.getAttribute('data-tooltip');\r\n+    const componentColor = window.getComputedStyle(component).backgroundColor;\r\n+\r\n+    // Create a new component in the main window\r\n+    createComponentInGraphWindow(componentId, componentName, componentColor);\r\n+}\r\n+\r\n+function createComponentInGraphWindow(componentId, componentName, componentColor) {\r\n+    // Create a div for the component\r\n+    const newComponent = document.createElement('div');\r\n+    newComponent.classList.add('graph-component');  // Add a class for styling\r\n+    newComponent.setAttribute('data-tooltip', componentName);  // For displaying tooltip\r\n+    newComponent.setAttribute('name', componentName);\r\n+    newComponent.style.backgroundColor = componentColor;  // Set the color to match the left panel\r\n+\r\n+    // Set the content (icon) for the new component\r\n+    switch (componentId) {\r\n+        case 'load_balancer':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-network-wired\"></i>';\r\n+            break;\r\n+        case 'server':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-server\"></i>';\r\n+            break;\r\n+        case 'client':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-user\"></i>';\r\n+            break;\r\n+        case 'cache':\r\n+            newComponent.innerHTML = '<i class=\"fa-solid fa-memory\"></i>';\r\n+            break;\r\n+        case 'database':\r\n+            newComponent.innerHTML = '<i class=\"fas fa-database\"></i>';\r\n+            break;\r\n+        case 'aws':\r\n+            newComponent.innerHTML = '<i class=\"fab fa-aws\"></i>';\r\n+            break;\r\n+            case 'api_gateway':\r\n+                newComponent.innerHTML = '<i class=\"fa-solid fa-code\"></i>';\r\n+                break;\r\n+            case 'msg_queue':\r\n+                newComponent.innerHTML = '<i class=\"fa-solid fa-message\"></i>';\r\n+                break;\r\n+            case 'cdn':\r\n+                newComponent.innerHTML = '<i class=\"fa-solid fa-cloud-upload-alt\"></i> <i class=\"fa-solid fa-cloud-download-alt\"></i>';\r\n+                break;\r\n+            case 'dns':\r\n+                newComponent.innerHTML = '<i class=\"fas fa-globe\"></i><i class=\"fas fa-address-book\"></i>';\r\n+                break;\r\n+            case 'firewall':\r\n+                newComponent.innerHTML = '<i class=\"fas fa-shield-halved\"></i><i class=\"fas fa-fire\"></i>';\r\n+                break;\r\n+            case 'aths':\r\n+                newComponent.innerHTML = '<i class=\"fas fa-server\"></i><i class=\"fas fa-user\"></i>';\r\n+                break;\r\n+        default:\r\n+            return;  // Exit if the component ID is unrecognized\r\n+    }\r\n+\r\n+    // Create a label to show the name of the component\r\n+    const label = document.createElement('span');\r\n+    label.innerText = componentName;\r\n+    label.style.position = 'absolute';  // Position label outside the circle\r\n+    label.style.top = '70px';  // Slightly below the component\r\n+    label.style.left = '50%';\r\n+    label.style.transform = 'translateX(-50%)';  // Center it horizontally\r\n+    label.style.fontWeight = 'bold';  // Make text bold\r\n+    label.style.color = 'black';  // Black color for better contrast\r\n+    label.style.fontSize = '14px';  // Slightly larger text\r\n+\r\n+    // Add the label below the component\r\n+    newComponent.appendChild(label);\r\n+\r\n+    // Add draggable functionality\r\n+    newComponent.style.position = 'absolute';  // Absolute positioning\r\n+    const componentSize = 60; // Size of the component\r\n+    const labelHeight = 30; // Approximate height of the label\r\n+    const bottomBarHeight = document.querySelector('.input-bar').offsetHeight; // Get the height of the bottom bar\r\n+\r\n+    // Ensure the component and label appear within the correct boundaries (considering the bottom bar and label height)\r\n+    const maxTop = graphWindow.offsetHeight - componentSize - labelHeight - bottomBarHeight;\r\n+    const maxLeft = graphWindow.offsetWidth - componentSize;\r\n+\r\n+    let top = getRandomPosition(maxTop, componentSize);\r\n+    let left = getRandomPosition(maxLeft, componentSize);\r\n+\r\n+    // Ensure no overlap when placing\r\n+    while (isOverlapping(newComponent, top, left)) {\r\n+        top = getRandomPosition(maxTop, componentSize);\r\n+        left = getRandomPosition(maxLeft, componentSize);\r\n+    }\r\n+\r\n+    newComponent.style.top = top + 'px';\r\n+    newComponent.style.left = left + 'px';\r\n+\r\n+    makeDraggable(newComponent);  // Make the component draggable\r\n+\r\n+    // Append the component to the main window\r\n+    graphWindow.appendChild(newComponent);\r\n+}\r\n+\r\n+// Function to make the component draggable\r\n+function makeDraggable(element) {\r\n+    let offsetX = 0, offsetY = 0, mouseX = 0, mouseY = 0;\r\n+\r\n+    element.onmousedown = dragMouseDown;\r\n+\r\n+    function dragMouseDown(e) {\r\n+        e.preventDefault();\r\n+        mouseX = e.clientX;\r\n+        mouseY = e.clientY;\r\n+        document.onmouseup = closeDragElement;\r\n+        document.onmousemove = elementDrag;\r\n+    }\r\n+\r\n+    function elementDrag(e) {\r\n+        e.preventDefault();\r\n+\r\n+        // Calculate new positions\r\n+        offsetX = mouseX - e.clientX;\r\n+        offsetY = mouseY - e.clientY;\r\n+        mouseX = e.clientX;\r\n+        mouseY = e.clientY;\r\n+\r\n+        // Get current component dimensions and position\r\n+        const elementWidth = element.offsetWidth;\r\n+        const elementHeight = element.offsetHeight;\r\n+        const labelHeight = 30; // Approximate height of the label\r\n+\r\n+        // Get the boundaries of the main window\r\n+        const windowWidth = graphWindow.offsetWidth;\r\n+        const windowHeight = graphWindow.offsetHeight;\r\n+        \r\n+        // Get the height of the black input bar (bottom bar)\r\n+        const bottomBarHeight = document.querySelector('.input-bar').offsetHeight;\r\n+\r\n+        // Calculate new top and left positions, ensuring the component stays inside the main window\r\n+        let newTop = element.offsetTop - offsetY;\r\n+        let newLeft = element.offsetLeft - offsetX;\r\n+\r\n+        // Boundary checks to prevent dragging outside the main window (considering the label)\r\n+        if (newTop < 0) newTop = 0; // Prevent moving above the top boundary\r\n+        if (newLeft < 0) newLeft = 0; // Prevent moving to the left of the boundary\r\n+        if (newTop + elementHeight + labelHeight > windowHeight - bottomBarHeight) newTop = windowHeight - bottomBarHeight - elementHeight - labelHeight; // Prevent moving below the black line\r\n+        if (newLeft + elementWidth > windowWidth) newLeft = windowWidth - elementWidth; // Prevent moving beyond the right boundary\r\n+\r\n+        // Update the element's position temporarily to check for overlaps\r\n+        element.style.top = newTop + \"px\";\r\n+        element.style.left = newLeft + \"px\";\r\n+\r\n+        // If the new position causes overlap, revert the position\r\n+        if (isOverlapping(element, newTop, newLeft)) {\r\n+            element.style.top = (element.offsetTop + offsetY) + \"px\";\r\n+            element.style.left = (element.offsetLeft + offsetX) + \"px\";\r\n+        }\r\n+    }\r\n+        \r\n+    function closeDragElement() {\r\n+        document.onmouseup = null;\r\n+        document.onmousemove = null;\r\n+    }\r\n+}\r\n+\r\n+// Function to check if a component is overlapping with others\r\n+function isOverlapping(newElement, top, left) {\r\n+    const existingComponents = document.querySelectorAll('.graph-component');\r\n+    const newRect = {\r\n+        top: top,\r\n+        left: left,\r\n+        bottom: top + newElement.offsetHeight,\r\n+        right: left + newElement.offsetWidth\r\n+    };\r\n+\r\n+    for (let i = 0; i < existingComponents.length; i++) {\r\n+        const component = existingComponents[i];\r\n+        if (component === newElement) continue; // Skip the element itself\r\n+\r\n+        const rect = {\r\n+            top: component.offsetTop,\r\n+            left: component.offsetLeft,\r\n+            bottom: component.offsetTop + component.offsetHeight,\r\n+            right: component.offsetLeft + component.offsetWidth\r\n+        };\r\n+\r\n+        // Check if the rectangles overlap\r\n+        if (\r\n+            newRect.left < rect.right &&\r\n+            newRect.right > rect.left &&\r\n+            newRect.top < rect.bottom &&\r\n+            newRect.bottom > rect.top\r\n+        ) {\r\n+            return true; // Overlap detected\r\n+        }\r\n+    }\r\n+    return false; // No overlap\r\n+}\r\n+\r\n+// Function to generate a random position, ensuring it stays within the main window\r\n+function getRandomPosition(max, elementSize) {\r\n+    return Math.floor(Math.random() * (max - elementSize - 20)) + 10;\r\n+}\r"
                },
                {
                    "filename": "static/scripts/mic.js",
                    "status": "added",
                    "additions": 151,
                    "deletions": 0,
                    "changes": 151,
                    "patch": "@@ -0,0 +1,151 @@\n+/*// Check if the browser supports the Web Speech API\r\n+window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n+\r\n+let recognition = null;\r\n+let micButton = document.getElementById('mic-button');\r\n+let stopButton = null;\r\n+let isRecording = false;\r\n+\r\n+// Initialize Speech Recognition\r\n+if (window.SpeechRecognition) {\r\n+    recognition = new SpeechRecognition();\r\n+    recognition.interimResults = true; // Get real-time text as the user speaks\r\n+    recognition.continuous = true; // Continuous recognition\r\n+\r\n+    recognition.onresult = function (event) {\r\n+        let transcript = '';\r\n+        for (let i = event.resultIndex; i < event.results.length; i++) {\r\n+            transcript += event.results[i][0].transcript;\r\n+        }\r\n+        // Append the recognized speech to the textarea\r\n+        document.getElementById('user-input').value = transcript;\r\n+    };\r\n+\r\n+    recognition.onend = function () {\r\n+        if (isRecording) {\r\n+            recognition.start(); // Restart recognition if it was stopped accidentally\r\n+        }\r\n+    };\r\n+\r\n+    recognition.onerror = function (event) {\r\n+        console.error('Speech recognition error:', event.error);\r\n+        stopRecording(); // Stop recording on error\r\n+    };\r\n+} else {\r\n+    alert('Sorry, your browser does not support speech recognition.');\r\n+}\r\n+\r\n+// Function to start recording\r\n+function startRecording() {\r\n+    if (recognition && !isRecording) {\r\n+        recognition.start();\r\n+        isRecording = true;\r\n+        micButton.textContent = 'Recording...';\r\n+\r\n+        // Create and show the Stop button next to mic button\r\n+        stopButton = document.createElement('button');\r\n+        stopButton.textContent = 'Stop';\r\n+        stopButton.style.backgroundColor = 'red';\r\n+        stopButton.style.marginLeft = '10px';\r\n+        stopButton.onclick = stopRecording;\r\n+        micButton.parentElement.appendChild(stopButton);\r\n+    }\r\n+}\r\n+\r\n+// Function to stop recording\r\n+function stopRecording() {\r\n+    if (recognition && isRecording) {\r\n+        recognition.stop();\r\n+        isRecording = false;\r\n+        micButton.textContent = '\ud83c\udfa4';\r\n+\r\n+        // Remove the Stop button\r\n+        if (stopButton) {\r\n+            stopButton.remove();\r\n+            stopButton = null;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+// Event listener to start recording on mic button click\r\n+micButton.addEventListener('click', startRecording);*/\r\n+\r\n+// Check if the browser supports the Web Speech API\r\n+window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n+\r\n+let recognition = null;\r\n+let micButton = document.getElementById('mic-button');\r\n+let stopButton = document.getElementById('stop-button');\r\n+let isRecording = false;\r\n+\r\n+// Initialize Speech Recognition\r\n+if (window.SpeechRecognition) {\r\n+    recognition = new SpeechRecognition();\r\n+    recognition.interimResults = true; // Get real-time text as the user speaks\r\n+    recognition.continuous = true; // Continuous recognition\r\n+\r\n+    recognition.onresult = function (event) {\r\n+        let transcript = '';\r\n+        let isFinal = false;  // Flag to check if it's the final result\r\n+\r\n+        // Loop through the results and append only final results to textarea\r\n+        for (let i = event.resultIndex; i < event.results.length; i++) {\r\n+            transcript = event.results[i][0].transcript;\r\n+            isFinal = event.results[i].isFinal;  // Check if the result is final\r\n+        }\r\n+\r\n+        if (isFinal) {\r\n+            // Append only the final result to the textarea\r\n+            const textArea = document.getElementById('user-input');\r\n+            textArea.value += transcript + ' ';  // Add space between words\r\n+        }\r\n+    };\r\n+\r\n+    recognition.onend = function () {\r\n+        if (isRecording) {\r\n+            recognition.start(); // Restart recognition if it was stopped accidentally\r\n+        }\r\n+    };\r\n+\r\n+    recognition.onerror = function (event) {\r\n+        console.error('Speech recognition error:', event.error);\r\n+        stopRecording(); // Stop recording on error\r\n+    };\r\n+} else {\r\n+    alert('Sorry, your browser does not support speech recognition.');\r\n+}\r\n+\r\n+// Function to start recording\r\n+function startRecording() {\r\n+    if (recognition && !isRecording) {\r\n+        recognition.start();\r\n+        isRecording = true;\r\n+        micButton.innerHTML = '<i class=\"fa-solid fa-microphone\"></i>';\r\n+\r\n+        // Create and show the Stop button next to mic button\r\n+        stopButton = document.createElement('button');\r\n+        stopButton.innerHTML = '<i class=\"fa-solid fa-circle-xmark\"></i>';\r\n+        stopButton.style.backgroundColor = 'red';\r\n+        stopButton.onclick = stopRecording;\r\n+        micButton.parentElement.appendChild(stopButton);\r\n+    }\r\n+}\r\n+\r\n+// Function to stop recording\r\n+function stopRecording() {\r\n+    if (recognition && isRecording) {\r\n+        recognition.stop();\r\n+        isRecording = false;\r\n+        micButton.innerHTML = '<i class=\"fa-solid fa-microphone\"></i>';\r\n+\r\n+        // Remove the Stop button\r\n+        if (stopButton) {\r\n+            stopButton.remove();\r\n+            stopButton = null;\r\n+        }\r\n+    }\r\n+}\r\n+\r\n+// Event listener to start recording on mic button click\r\n+micButton.addEventListener('click', startRecording);\r\n+stopButton.addEventListener('click', stopRecording);\n\\ No newline at end of file"
                },
                {
                    "filename": "templates/index.html",
                    "status": "added",
                    "additions": 96,
                    "deletions": 0,
                    "changes": 96,
                    "patch": "@@ -0,0 +1,96 @@\n+<!DOCTYPE html>\r\n+<html lang=\"en\">\r\n+<head>\r\n+    <meta charset=\"UTF-8\">\r\n+    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n+    <title>AISysD System Design Simulator</title>\r\n+    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/styles.css') }}\">\r\n+    <!-- Updated Font Awesome link -->\r\n+    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css\">\r\n+    <link rel=\"icon\" type=\"image/x-icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\">\r\n+    <link href=\"https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap\" rel=\"stylesheet\">\r\n+    <script src=\"https://d3js.org/d3.v7.min.js\"></script>\r\n+</head>\r\n+<body>   \r\n+    <div class=\"container\">\r\n+        <!-- Left column for component selection -->\r\n+        <div class=\"component-panel\">\r\n+            <h3>Select Components</h3>\r\n+            <div id=\"components\">\r\n+                <!-- Circular icons for different components with tooltips -->\r\n+                <div class=\"component\" id=\"load_balancer\" data-tooltip=\"Load Balancer\">\r\n+                    <i class=\"fa-solid fa-network-wired\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"server\" data-tooltip=\"Server\">\r\n+                    <i class=\"fa-solid fa-server\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"client\" data-tooltip=\"Client\">\r\n+                    <i class=\"fa-solid fa-user\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"cache\" data-tooltip=\"Cache\">\r\n+                    <i class=\"fa-solid fa-memory\"></i>\r\n+                </div>                \r\n+                <div class=\"component\" id=\"database\" data-tooltip=\"Database\">\r\n+                    <i class=\"fa-solid fa-database\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"aws\" data-tooltip=\"AWS\">\r\n+                    <i class=\"fa-brands fa-aws\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"api_gateway\" data-tooltip=\"API Gateway\">\r\n+                    <i class=\"fa-solid fa-code\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"msg_queue\" data-tooltip=\"Message Queue\">\r\n+                    <i class=\"fa-solid fa-message\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"cdn\" data-tooltip=\"CDN\">\r\n+                    <i class=\"fa-solid fa-cloud-upload-alt\"></i> <i class=\"fa-solid fa-cloud-download-alt\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"dns\" data-tooltip=\"DNS\">\r\n+                    <i class=\"fas fa-globe\"></i><i class=\"fas fa-address-book\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"firewall\" data-tooltip=\"Firewall\">\r\n+                <i class=\"fas fa-shield-halved\"></i><i class=\"fas fa-fire\"></i>\r\n+                </div>\r\n+                <div class=\"component\" id=\"aths\" data-tooltip=\"Authentication Server\">\r\n+                    <i class=\"fas fa-server\"></i><i class=\"fas fa-user\"></i>\r\n+                    </div>\r\n+            </div>\r\n+            <div class=\"buttons\">\r\n+                <button id=\"build-connection\" class=\"button\">\r\n+                    Build Connection\r\n+                </button>\r\n+                <button id=\"delete\" class=\"button\">\r\n+                    Delete Component\r\n+                </button> \r\n+            </div>\r\n+        </div>\r\n+\r\n+        <div class=\"graph-input-container\">\r\n+            <!-- Main window for graph visualization -->\r\n+            <div class=\"main-window\" id=\"graph-window\">\r\n+                <!-- D3.js will render the graph here -->\r\n+            </div>\r\n+    \r\n+            <!-- Bottom bar for input -->\r\n+            <div class=\"input-bar\">\r\n+                <textarea id=\"user-input\" placeholder=\"Describe your system...\"></textarea>\r\n+                <div class=\"input-buttons\">\r\n+                    <div id=\"mic-stop-wrapper\">\r\n+                    <button id=\"mic-button\"><i class=\"fa-solid fa-microphone\"></i></button>\r\n+                    <button id=\"stop-button\" style=\"display:none;\"><i class=\"fa-solid fa-times\"></i></button>\r\n+                    </div>\r\n+                    <!-- New Send button with an up arrow -->\r\n+                    <button id=\"send-button\">\r\n+                        <i class=\"fas fa-arrow-up\"></i> Send\r\n+                    </button>\r\n+                </div>\r\n+            </div>\r\n+        </div>\r\n+\r\n+    </div>\r\n+    <script src=\"{{ url_for('static', filename='scripts/graph.js') }}\"></script>\r\n+    <script src=\"{{ url_for('static', filename='components/build_path.js') }}\"></script>\r\n+    <script src=\"{{ url_for('static', filename='scripts/api.js') }}\"></script>\r\n+    <script src=\"{{ url_for('static', filename='scripts/mic.js') }}\"></script>\r\n+</body>\r\n+</html>\r"
                }
            ]
        },
        {
            "commit_hash": "837f6e3c7d02f4d2594abf6f9b3bbec292b7294a",
            "message": "Create README.md",
            "author": {
                "name": "Parth Bhalerao",
                "email": "98455586+pvbgeek@users.noreply.github.com"
            },
            "timestamp": "2024-09-29T20:07:10+00:00",
            "previous_commit": null,
            "files_changed": [
                {
                    "filename": "README.md",
                    "status": "added",
                    "additions": 2,
                    "deletions": 0,
                    "changes": 2,
                    "patch": "@@ -0,0 +1,2 @@\n+# AI-based-System-Design-Builder\n+Hack-AI-Dell-Nvidia-Hackathon"
                }
            ]
        }
    ]
}]}